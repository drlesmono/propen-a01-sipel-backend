[{"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\index.js":"1","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\App.js":"3","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Layout\\index.js":"4","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\PenugasanEngineer\\index.js":"5","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\APIConfig.js":"6","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Button\\index.js":"7","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Table\\index.js":"8","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Modal\\index.js":"9","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Backdrop\\index.js":"10","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\PeriodeKontrak\\index.js":"11","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Login\\index.js":"12","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\Homepage\\index.js":"13","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\LaporanInstalasiMaintenance\\index.js":"14"},{"size":544,"mtime":1619591270619,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":5418,"mtime":1621490400225,"results":"18","hashOfConfig":"16"},{"size":225,"mtime":1620187315518,"results":"19","hashOfConfig":"16"},{"size":19798,"mtime":1621263636671,"results":"20","hashOfConfig":"16"},{"size":143,"mtime":1618932282107,"results":"21","hashOfConfig":"16"},{"size":802,"mtime":1619176967606,"results":"22","hashOfConfig":"16"},{"size":2994,"mtime":1619024890744,"results":"23","hashOfConfig":"16"},{"size":478,"mtime":1619532665996,"results":"24","hashOfConfig":"16"},{"size":259,"mtime":1618994525865,"results":"25","hashOfConfig":"16"},{"size":29890,"mtime":1621263730599,"results":"26","hashOfConfig":"16"},{"size":847,"mtime":1619584073795,"results":"27","hashOfConfig":"16"},{"size":4619,"mtime":1619585963576,"results":"28","hashOfConfig":"16"},{"size":20503,"mtime":1621598939119,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1qicre3",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\index.js",[],["63","64"],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\App.js",["65"],"// import logo from './logo.svg';\r\nimport { useRoutes, A } from \"hookrouter\";\r\n// import routes from \"./router\";\r\nimport './App.css';\r\nimport Layout from \"./components/Layout\";\r\nimport PenugasanEngineer from \"./containers/PenugasanEngineer\";\r\nimport PeriodeKontrak from \"./containers/PeriodeKontrak\";\r\nimport LaporanInstalasiMaintenance from \"./containers/LaporanInstalasiMaintenance\";\r\nimport { Navbar, NavDropdown, Nav } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport homepage from \"./assets/homepage.png\";\r\n\r\nconst routes = {\r\n  \"/\": () => \r\n            <div> \r\n              <div style={{ margin: 75 }}>\r\n                <table>\r\n                  <tr>\r\n                    <td>\r\n                      <div style={{ margin: 30 }}>\r\n                        <h3 style={{ color: '#F7873F' }}>Hello, name_here</h3>\r\n                        <h1 style={{ color: '#2F3F58' }}>Selamat Datang di Sistem Informasi Pengelolaan Layanan</h1>\r\n                      </div>\r\n                    </td>\r\n                    <td><img src={homepage} alt=\"homepage\"/></td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </div>,\r\n  \"/produksi/penugasan\": () => <PenugasanEngineer />,\r\n  \"/produksi/periodeKontrak\": () => <PeriodeKontrak />,\r\n  \"/laporan/daftarLaporan\" : () => <LaporanInstalasiMaintenance />\r\n};\r\n\r\nfunction App(){\r\n\r\n  const routeResult = useRoutes(routes);\r\n\r\n    return (\r\n        <>\r\n          <Navbar collapseOnSelect expand=\"lg\" id=\"navbar\" variant=\"dark\" style={{ backgroundColor: '#2F3F58' }}>\r\n            <Navbar.Brand href=\"/\" style={{ textDecoration: 'none', color: '#F7873F' }}>SIPEL</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n              <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"#dashboard\">Dashboard</Nav.Link>\r\n                <NavDropdown title=\"Order\" id=\"collasible-nav-dropdown\">\r\n                  {/* <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                  <NavDropdown.Divider />\r\n                  <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item> */}\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <Nav.Link href=\"#action/3.1\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Action</Nav.Link>\r\n                    <Nav.Link href=\"#action/3.2\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Another action</Nav.Link>\r\n                    <Nav.Link href=\"#action/3.4\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Something</Nav.Link>\r\n                    <Nav.Link href=\"#action/3.4\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Something 2</Nav.Link>\r\n                  </div>\r\n                </NavDropdown>\r\n                <NavDropdown title=\"Produksi\" id=\"collasible-nav-dropdown\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <Nav.Link href=\"/produksi/penugasan\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Penugasan</Nav.Link>\r\n                    <Nav.Link href=\"#produksi/progress-delivery\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Progress Delivery</Nav.Link>\r\n                    <Nav.Link href=\"/produksi/periodeKontrak\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Periode Kontrak</Nav.Link>\r\n                    <Nav.Link href=\"#produksi/maintenance\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Maintenance</Nav.Link>\r\n                  </div>\r\n                  {/* <NavDropdown.Item href=\"#produksi/progress-delivery\">Progress Delivery</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"/produksi/periodeKontrak\">Periode Kontrak</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#produksi/maintenance\">Maintenance</NavDropdown.Item> */}\r\n                </NavDropdown>\r\n                <NavDropdown title=\"Laporan\"  id=\"collasible-nav-dropdown\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <Nav.Link href=\"/laporan/daftarLaporan\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Daftar Laporan</Nav.Link>\r\n                    <Nav.Link href=\"#laporan/verifikasiLaporan\" style={{color: \"black\"}} className=\"pl-5 pr-5\">Verifikasi Laporan</Nav.Link>\r\n                  </div>\r\n                  {/* <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                  <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                  <NavDropdown.Divider />\r\n                  <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item> */}\r\n                </NavDropdown>\r\n                <Nav.Link href=\"#halamanAdmin\">Halaman Admin</Nav.Link>\r\n              </Nav>\r\n              <Nav>\r\n                <Nav.Link href=\"#deets\">name_here</Nav.Link>\r\n                {/* <Nav.Link eventKey={2} href=\"#memes\">\r\n                  Dank memes\r\n                </Nav.Link> */}\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n          <Layout>\r\n            { routeResult }\r\n          </Layout>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Layout\\index.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\PenugasanEngineer\\index.js",["66"],"import React, { Component } from \"react\";\r\nimport APIConfig from \"../../APIConfig\";\r\nimport CustomizedTables from \"../../components/Table\";\r\nimport CustomizedButtons from \"../../components/Button\";\r\n// import Modal from \"../../components/Modal\";\r\nimport { Form, Button, Card, Table } from \"react-bootstrap\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport classes from \"./styles.module.css\";\r\n\r\nclass PenugasanEngineer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ordersVerified: [],\r\n            isLoading: false,\r\n            isEdit: false,\r\n            orderTarget: null,\r\n            users: [],\r\n            picEngineerPi: null,\r\n            picEngineerMs: null,\r\n            servicesEngineer: [],\r\n            isReport: false,\r\n            orderFiltered: [],\r\n            isFiltered: false,\r\n            isError: false,\r\n            isSuccess: false,\r\n            isFailed: false\r\n        };\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleReport = this.handleReport.bind(this);\r\n        this.handleFilter = this.handleFilter.bind(this);\r\n        this.handleCloseNotif = this.handleCloseNotif.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n    \r\n    async loadData() {\r\n        try {\r\n            const orders = await APIConfig.get(\"/ordersVerified\");\r\n            const users = await APIConfig.get(\"/users\");\r\n            // console.log(orders.data);\r\n            // console.log(users.data);\r\n            this.setState({ ordersVerified: orders.data, users: users.data});\r\n            \r\n        } catch (error) {\r\n            // alert(\"Oops terjadi masalah pada server\");\r\n            this.setState({ isError: true });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        try {\r\n            if(this.state.orderTarget.projectInstallation === true){\r\n                const pi = this.state.orderTarget.idOrderPi;\r\n                const dataPi = {\r\n                    idOrderPi: pi.idOrderPi,\r\n                    idUserEng: this.state.picEngineerPi,\r\n                    percentage: pi.percentage,\r\n                    startPI: pi.startPI,\r\n                    deadline: pi.deadline,\r\n                    dateClosedPI: pi.dateClosedPI\r\n                }\r\n                await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/pi/${this.state.orderTarget.idOrderPi.idOrderPi}/updatePIC`, dataPi);\r\n            }\r\n            if(this.state.orderTarget.managedService === true){\r\n                const ms = this.state.orderTarget.idOrderMs;\r\n                const dataMs = {\r\n                    idOrderMs: ms.idOrderMs,\r\n                    idUserPic: this.state.picEngineerMs,\r\n                    actualStart: ms.actualStart,\r\n                    actualEnd: ms.actualEnd,\r\n                    activated: ms.activated,\r\n                    timeRemaining: ms.timeRemaining,\r\n                    dateClosedMS: ms.dateClosedMS\r\n                }\r\n                await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/updatePIC`, dataMs);\r\n                let listService = this.getListService(this.state.orderTarget);\r\n                console.log(this.state.servicesEngineer);\r\n                for(let i=0; i<this.state.servicesEngineer.length; i++){\r\n                    console.log(i);\r\n                    let service = listService[i];\r\n                    console.log(service);\r\n                    const dataService = {\r\n                        idService: service.idService,\r\n                        name: service.name,\r\n                        idUser: this.state.servicesEngineer[i]\r\n                    }\r\n                    await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/service/${service.idService}/updateService`, dataService);\r\n                }\r\n            }\r\n            this.loadData();\r\n        } catch (error) {\r\n            // alert(\"Penugasan Engineer gagal disimpan\");\r\n            console.log(error);\r\n            return this.setState({isFailed: true});\r\n        }\r\n        // this.handleReport(event);\r\n        this.setState({isSuccess: true, isEdit: false});\r\n    }\r\n\r\n    handleReport(event){\r\n        event.preventDefault();\r\n        this.setState({isSuccess: false, isReport: true});\r\n        // alert(\"Penugasan Engineer berhasil disimpan\");\r\n    }\r\n\r\n    checkTypeOrder(pi, ms){\r\n        if(pi === true && ms === true){\r\n            return \"Project Installation, Managed Service\";\r\n        }else if(pi === true){\r\n            return \"Project Installation\";\r\n        }else if(ms === true){\r\n            return \"Managed Service\";\r\n        }\r\n    }\r\n\r\n    getPICPI(idOrder){\r\n        let orderTarget = this.state.ordersVerified.filter(\r\n            order => order.idOrder === idOrder\r\n        );\r\n        let pi = orderTarget.map(order => {return order.idOrderPi});\r\n    \r\n        if(orderTarget !== null && pi[0] !== null){\r\n            let user = orderTarget.map(order => order.idOrderPi.idUserEng);\r\n            if(user !== null){\r\n                let pic = orderTarget.map(order => order.idOrderPi.idUserEng.fullname);\r\n                return pic;\r\n            }\r\n        }\r\n\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    getPICMS(idOrder){\r\n        let orderTarget = this.state.ordersVerified.filter(\r\n            order => order.idOrder === idOrder\r\n        );\r\n        let ms = orderTarget.map(order => {return order.idOrderMs});\r\n    \r\n        if(orderTarget !== null && ms[0] !== null){\r\n            let user = orderTarget.map(order => order.idOrderMs.idUserPic);\r\n            if(user !== null){\r\n                let pic = orderTarget.map(order => order.idOrderMs.idUserPic.fullname);\r\n                return pic;\r\n            }\r\n        }\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    getPICService(service){\r\n        if(service.idUser !== null) return service.idUser.fullname;\r\n        return \"Belum ditugaskan\";\r\n    }\r\n    \r\n    handleEdit(order) {\r\n        this.setState({\r\n            isEdit: true,\r\n            orderTarget: order\r\n        });\r\n        if(order.idOrderPi !== null){\r\n            if(order.idOrderPi.idUserEng !== null){\r\n                this.setState({picEngineerPi: order.idOrderPi.idUserEng.id});\r\n            }\r\n        }\r\n        if(order.idOrderMs !== null){\r\n            if(order.idOrderMs.idUserPic !== null){\r\n                let servicesEngineer = order.idOrderMs.listService.map(service => service.idUser.id);\r\n                this.setState({\r\n                    picEngineerMs: order.idOrderMs.idUserPic.id, \r\n                    servicesEngineer: servicesEngineer\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleCancel(event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            isEdit: false, \r\n            isReport: false, \r\n            isError: false, \r\n            isSuccess: false,\r\n            isFailed: false\r\n        });\r\n    }\r\n\r\n    handleChangeField(event) {\r\n        const { name, value } = event.target;\r\n        console.log(name, value);\r\n        const servicesEngineerNew = this.state.servicesEngineer;\r\n        if( name.substring(0,16) === \"servicesEngineer\"){\r\n            let index = Number(name.substring(16));\r\n            servicesEngineerNew[index] = value;\r\n            this.setState({ servicesEngineer: servicesEngineerNew});\r\n        }else{\r\n            this.setState({ [name]: value});\r\n        }\r\n    }\r\n\r\n    getListService(order){\r\n        if(order.idOrderMs !== null){\r\n            return order.idOrderMs.listService;\r\n        }\r\n    }\r\n\r\n    getOrder(idOrder){\r\n        const orders = this.state.ordersVerified;\r\n        for(let i=0; i<=orders.length; i++){\r\n            if(orders[i].idOrder === idOrder){\r\n                return orders[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFilter(event){\r\n        let newOrderList = this.state.ordersVerified;\r\n        const { value } = event.target;\r\n        if( value !== \"\" ){\r\n            newOrderList = this.state.ordersVerified.filter(order => {\r\n                return (order.orderName.toLowerCase().includes(value.toLowerCase()) ||\r\n                order.noPO.toLowerCase().includes(value.toLowerCase()))\r\n            });\r\n            this.setState({ isFiltered : true });\r\n        }else{\r\n            this.setState({ isFiltered : false });\r\n        }\r\n        this.setState({ orderFiltered : newOrderList });\r\n    }\r\n\r\n    handleCloseNotif(){\r\n        this.setState({ isFailed: false });\r\n    }\r\n\r\n    render() {\r\n        const { ordersVerified, isEdit, orderTarget, users, picEngineerPi, isFailed,\r\n             picEngineerMs, servicesEngineer, isReport, isError, isSuccess, orderFiltered, isFiltered } = this.state;\r\n        console.log(orderTarget);\r\n        console.log(picEngineerPi);\r\n        console.log(servicesEngineer);\r\n        const tableHeaders = ['No.', 'Nomor PO', 'Nama Order', 'Tipe', 'PIC PI', 'PIC MS', 'Aksi'];                  \r\n        const tableRows = isFiltered ? orderFiltered.map((order) =>\r\n                        [ order.noPO === null ? \"-\" : order.noPO, order.orderName, \r\n                        this.checkTypeOrder(order.projectInstallation, order.managedService), \r\n                        this.getPICPI(order.idOrder), this.getPICMS(order.idOrder),\r\n                        <div className=\"d-flex justify-content-center\"><Button className={classes.button1}\r\n                        onClick={() => this.handleEdit(order)}>perbarui</Button></div>])\r\n                        : ordersVerified.map((order) =>\r\n                        [order.noPO === null ? \"-\" : order.noPO, order.orderName, \r\n                        this.checkTypeOrder(order.projectInstallation, order.managedService), \r\n                        this.getPICPI(order.idOrder), this.getPICMS(order.idOrder),\r\n                        <div className=\"d-flex justify-content-center\"><Button className={classes.button1}\r\n                        onClick={() => this.handleEdit(order)}>perbarui</Button></div>])\r\n        const tableServiceHeaders = ['No.', 'Nama Service', 'Engineer'];\r\n        let tableServiceRows;\r\n\r\n        if(orderTarget !== null){\r\n            if(orderTarget.idOrderPi !== null){\r\n            }\r\n            if(orderTarget.idOrderMs !== null){\r\n                tableServiceRows = orderTarget.idOrderMs.listService.map((service, index) =>\r\n                                        [service.name, isReport ? this.getPICService(service) :\r\n                                        <Form.Control as=\"select\" size=\"sm\" key={index} name={\"servicesEngineer\"+index} \r\n                                        value={servicesEngineer[index] === null ? users[0].id : servicesEngineer[index]}\r\n                                        onChange={this.handleChangeField}>\r\n                                            {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                        </Form.Control>]);\r\n            }\r\n        }\r\n\r\n        const title = isReport? \"Penugasan Engineer\" : \"Form Penugasan Engineer\";\r\n\r\n        return (\r\n            <div className={classes.container}>\r\n                <div><h1 className=\"text-center\">Daftar Order</h1></div>\r\n                <div className=\"d-flex justify-content-end\" style={{padding: 5}}><Form.Control type=\"text\" size=\"sm\" placeholder=\"Cari...\" onChange={this.handleFilter} className={classes.search}/></div>\r\n                <div><CustomizedTables headers={tableHeaders} rows={tableRows}/></div>\r\n                <Modal\r\n                    show={isEdit || isReport}\r\n                    dialogClassName=\"modal-90w\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                >\r\n                    <Modal.Header closeButton onClick={this.handleCancel}>\r\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                            {title}\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                        <Modal.Body>\r\n                               { isFailed ? \r\n                               <Card body className={classes.card}>\r\n                                   <div className=\"d-flex justify-content-between\">\r\n                                        <div>Penugasan Engineer Gagal disimpan</div>\r\n                                        <Button size=\"sm\" className=\"bg-transparent border border-0 border-transparent\" onClick={this.handleCloseNotif}>x</Button>\r\n                                    </div>\r\n                                </Card>\r\n                               : <></> }\r\n                            <p>\r\n                                {orderTarget !== null ?\r\n                                <><Form>\r\n                                    <Table borderless responsive=\"xl\" size=\"sm\">\r\n                                        {/* <tr>\r\n                                            <td>Id Order</td>\r\n                                            <td>: {orderTarget.idOrder}</td>\r\n                                        </tr> */}\r\n                                        <tr>\r\n                                            <td>Nomor PO</td>\r\n                                            <td>: {orderTarget.noPO === null? \"-\" : orderTarget.noPO}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Nama Order</td>\r\n                                            <td>: {orderTarget.orderName}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Perusahaan</td>\r\n                                            <td>: {orderTarget.clientOrg}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Tipe</td>\r\n                                            <td>: {this.checkTypeOrder(orderTarget.projectInstallation, orderTarget.managedService)}</td>\r\n                                        </tr>\r\n                                        { orderTarget.projectInstallation ?\r\n                                            <><tr>\r\n                                                <td style={{fontWeight: 'bold'}}>Project Installation</td>\r\n                                            </tr>\r\n                                            <tr>\r\n                                                <td>PIC Engineer</td>\r\n                                                {/* {console.log(picEngineerPi.id === null), console.log(users[0].id), console.log(picEngineerPi), console.log(users[0].id === picEngineerPi)} */}\r\n                                                {isReport ?\r\n                                                <td>: {this.getPICPI(orderTarget.idOrder)}</td> :\r\n                                                <td><Form.Control as=\"select\" size=\"sm\" name=\"picEngineerPi\" value={picEngineerPi === null ? users[0].id : picEngineerPi} onChange={this.handleChangeField}>\r\n                                                        {users.map((user, index) => <option key={index} value={user.id}>{user.fullname}</option>)}\r\n                                                    </Form.Control></td>}\r\n                                            </tr></>\r\n                                        : <></>}\r\n                                        { orderTarget.managedService ?\r\n                                        <><tr>\r\n                                            <td style={{fontWeight: 'bold'}}>Managed Service</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Services</td>\r\n                                            <td>\r\n                                                <><CustomizedTables headers={tableServiceHeaders} rows={tableServiceRows}></CustomizedTables></>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>PIC Engineer</td>\r\n                                            {isReport ?\r\n                                                <td>: {this.getPICMS(orderTarget.idOrder)}</td> :\r\n                                            <td><Form.Control as=\"select\" size=\"sm\" name=\"picEngineerMs\" value={picEngineerMs === null ? users[0].id : picEngineerMs} onChange={this.handleChangeField}>\r\n                                                    {/* {listServiceEngineerNew.map(user =><option value={user[1]}>{user[2]}</option>)} */}\r\n                                                    {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                                </Form.Control></td>}\r\n                                        </tr></>\r\n                                        : <></>}\r\n                                        {isReport ? <></> :\r\n                                        <tr>\r\n                                            <td></td>\r\n                                            <td className=\"d-flex justify-content-end\">\r\n                                                <Button variant=\"primary\" className={classes.button1} onClick={this.handleSubmit}>\r\n                                                    simpan\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr>}\r\n                                    </Table>\r\n                                </Form></>\r\n                                : <></> }\r\n                            </p>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                <Modal\r\n                    show={isSuccess || isError}\r\n                    dialogClassName=\"modal-90w\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                >\r\n                     <Modal.Header closeButton onClick={this.handleCancel}>\r\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                            Notification\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {isSuccess?\r\n                        <>\r\n                            <div className=\"d-flex justify-content-center\">Penugasan Engineer berhasil disimpan.</div><br></br>\r\n                            <div className=\"d-flex justify-content-center\">\r\n                                <Button variant=\"primary\" className={classes.button1} onClick={this.handleReport}>\r\n                                    Kembali\r\n                                </Button>\r\n                            </div>\r\n                        </> :\r\n                        <>\r\n                        <div className=\"d-flex justify-content-center\">Oops terjadi masalah pada server</div><br></br>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button variant=\"primary\" className={classes.button1} onClick={this.handleCancel}>\r\n                                Kembali\r\n                            </Button>\r\n                        </div>\r\n                        </>}\r\n                    </Modal.Body>\r\n                </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PenugasanEngineer;","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\APIConfig.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Button\\index.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Table\\index.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Modal\\index.js",[],["67","68"],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Backdrop\\index.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\PeriodeKontrak\\index.js",["69"],"import React, { Component } from \"react\";\r\nimport APIConfig from \"../../APIConfig\";\r\nimport CustomizedTables from \"../../components/Table\";\r\n// import CustomizedButtons from \"../../components/Button\";\r\n// import CustomizedModal from \"../../components/Modal\";\r\nimport { Form, Button, Card, Table } from \"react-bootstrap\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport classes from \"./styles.module.css\";\r\nimport moment from \"moment\";\r\n\r\nclass PeriodeKontrak extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ordersVerified: [],\r\n            isLoading: false,\r\n            isEdit: false,\r\n            isExtend: false,\r\n            orderTarget: null,\r\n            orderTargetUpdated: null,\r\n            users: [],\r\n            picEngineerMs: null,\r\n            servicesEngineer: [],\r\n            servicesEngineerName: [],\r\n            isReport: false,\r\n            isReportExtend: false,\r\n            orderFiltered: [],\r\n            isFiltered: false,\r\n            currentDateTime: new Date(),\r\n            actualStart: null,\r\n            actualEnd: null,\r\n            totalServices: 0,\r\n            listService: [],\r\n            services: [],\r\n            isAdded: false,\r\n            newNoPO: null,\r\n            timeRemaining: null,\r\n            isFailed: false,\r\n            isError: false,\r\n            isSuccess: false,\r\n            isValid: true\r\n        };\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleReport = this.handleReport.bind(this);\r\n        this.handleFilter = this.handleFilter.bind(this);\r\n        this.handleAddServices = this.handleAddServices.bind(this);\r\n        this.handleCloseNotif = this.handleCloseNotif.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n    \r\n    async loadData() {\r\n        try {\r\n            const orders = await APIConfig.get(\"/orders/ms\");\r\n            const users = await APIConfig.get(\"/users\");\r\n            this.setState({ ordersVerified: orders.data, users: users.data});\r\n        } catch (error) {\r\n            // alert(\"Oops terjadi masalah pada server\");\r\n            this.setState({ isError: true });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        if(this.state.isExtend){\r\n            if(this.state.newNoPO !== null){\r\n                if(this.state.newNoPO !== \"\"){\r\n                    let newOrder;\r\n                    let services;\r\n                    if(new Date(this.state.actualEnd) > new Date(this.state.actualStart)){\r\n                        try {   \r\n                            let response;\r\n                            const order = this.state.orderTarget;\r\n                            const pi = order.idOrderPi === null ? null : order.idOrderPi.idOrderPi;\r\n                            const ms = order.idOrderMs.idOrderMs;\r\n                            const dataOrder = {\r\n                                idOrder: order.idOrder,\r\n                                orderName: order.orderName,\r\n                                clientName: order.clientName,\r\n                                clientOrg: order.clientOrg,\r\n                                clientDiv: order.clientDiv,\r\n                                clientPIC: order.clientPIC,\r\n                                clientEmail: order.clientEmail,\r\n                                clientPhone: order.clientPhone,\r\n                                dateOrder: order.dateOrder,\r\n                                noPO: this.state.newNoPO,\r\n                                noSPH: order.noSPH,\r\n                                description: order.description,\r\n                                verified: order.verified,\r\n                                projectInstallation: order.projectInstallation,\r\n                                managedService: order.managedService,\r\n                                idOrderPi: pi,\r\n                                idOrderMs: ms\r\n                            }\r\n                            response = await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/perpanjangKontrak`, dataOrder);\r\n                            newOrder = response.data.result;\r\n                            this.loadData();  \r\n\r\n                            const newMs = newOrder.idOrderMs;\r\n                            const dataMs = {\r\n                                idOrderMs: newMs.idOrderMs,\r\n                                idUserPic: this.state.picEngineerMs,\r\n                                actualStart: this.convertDateToString(this.state.actualStart),\r\n                                actualEnd: this.convertDateToString(this.state.actualEnd),\r\n                                activated: newMs.activated,\r\n                                dateClosedMS: newMs.dateClosedMS\r\n                            }\r\n                            response = await APIConfig.put(`/order/${newOrder.idOrder}/ms/${newMs.idOrderMs}/updateKontrak`, dataMs);\r\n                            const newMsUpdated = response.data.result;\r\n                            \r\n                            let listServiceName = this.state.servicesEngineerName;\r\n                            let listService = this.state.servicesEngineer;\r\n                            services = new Array(listService.length);\r\n                            for(let i=0; i<listService.length; i++){\r\n                                const dataService = {\r\n                                    name: listServiceName[i],\r\n                                    idUser: listService[i]\r\n                                }\r\n                                response = await APIConfig.post(`/order/${newOrder.idOrder}/ms/${newMsUpdated.idOrderMs}/service`, dataService);\r\n                                const service = response.data.result;\r\n                                services[i] = service;\r\n                                this.loadData();\r\n                            }\r\n                            this.loadData();\r\n                        } catch (error) {\r\n                            console.log(error);\r\n                            return this.setState({isFailed: true, isValid: true});\r\n                        }\r\n                        return this.setState({isFailed: false, isValid: true, isSuccess: true, isExtend: false, orderTarget: newOrder, services: services, timeRemaining: this.getTimeRemaining(this.state.actualStart, this.state.actualEnd)});\r\n                    }else{\r\n                        return this.setState({isFailed: true, isValid: false});\r\n                    }\r\n                }else{\r\n                    return this.setState({isFailed: true, isValid: false});\r\n                }\r\n            }else{\r\n                return this.setState({isFailed: true, isValid: false});\r\n            }\r\n        }else{\r\n                if(new Date(this.state.actualEnd) > new Date(this.state.actualStart)){\r\n                    try {   \r\n                        const ms = this.state.orderTarget.idOrderMs;\r\n                        const dataMs = {\r\n                            idOrderMs: ms.idOrderMs,\r\n                            idUserPic: this.state.picEngineerMs,\r\n                            actualStart: this.convertDateToString(this.state.actualStart),\r\n                            actualEnd: this.convertDateToString(this.state.actualEnd),\r\n                            activated: ms.activated,\r\n                            dateClosedMS: ms.dateClosedMS\r\n                        }\r\n                        const newMs = await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${ms.idOrderMs}/updateKontrak`, dataMs);\r\n                        this.loadData();\r\n                    } catch (error) {\r\n                        console.log(error);\r\n                        return this.setState({isFailed: true, isValid: true});\r\n                    }\r\n                    return this.setState({isFailed: false,  isValid: true, isSuccess: true, isEdit: false, timeRemaining: this.getTimeRemaining(this.state.actualStart, this.state.actualEnd)});\r\n                }else{\r\n                    return this.setState({isFailed: true, isValid: false});\r\n                }\r\n        } \r\n    }\r\n\r\n    handleReport(event){\r\n        event.preventDefault();\r\n        if(this.state.isExtend){\r\n            this.setState({isReportExtend: true, isAdded: false});\r\n        }else{\r\n            this.setState({isReport: true});\r\n        }\r\n\r\n        this.setState({isSuccess: false, isFailed: false, isValid: true});\r\n    }\r\n\r\n    getDate(value){\r\n        let date = new Date(value);\r\n        const monthNames = [\"Januari\", \"Februari\", \"Maret\", \"April\", \"Mei\", \"Juni\",\r\n                            \"Juli\", \"Agustus\", \"September\", \"Oktober\", \"November\", \"Desember\"];\r\n\r\n        return date.getDate()+\" \"+monthNames[date.getMonth()]+\" \"+date.getFullYear();\r\n    }\r\n\r\n    getTimeRemaining(actualStart, actualEnd){\r\n        const startDate = new Date(actualStart);\r\n        const endDate = new Date(actualEnd);\r\n        let currentDate = this.state.currentDateTime;\r\n\r\n        if ( startDate > currentDate) {\r\n            return \"Belum mulai\";\r\n        } else if ( currentDate > endDate ){\r\n            return \"Habis\";\r\n        }\r\n        \r\n        let startYear = currentDate.getFullYear();\r\n        let startMonth = currentDate.getMonth();\r\n        let startDay = currentDate.getDate();\r\n        \r\n        let endYear = endDate.getFullYear();\r\n        let endMonth = endDate.getMonth();\r\n        let endDay = endDate.getDate();\r\n        \r\n        // We calculate February based on end year as it might be a leep year which might influence the number of days.\r\n        let february = (((endYear % 4 === 0) && (endYear % 100 !== 0)) || (endYear % 400 === 0)) ? 29 : 28;\r\n        let daysOfMonth = [31, february, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n        \r\n        let startDateNotPassedInEndYear = ((endMonth < startMonth) || (endMonth === startMonth )) && (endDay < startDay);\r\n        let years = endYear - startYear - (startDateNotPassedInEndYear ? 1 : 0);\r\n        \r\n        let months = (12 + endMonth - startMonth - (endDay < startDay ? 1 : 0)) % 12;\r\n        \r\n        // (12 + ...) % 12 makes sure index is always between 0 and 11\r\n        let days = startDay <= endDay ? endDay - startDay : daysOfMonth[(12 + endMonth - 1) % 12] - startDay + endDay;\r\n\r\n        let timeRemaining = \"\";\r\n        if(years === 0){\r\n            if(months === 0){\r\n                timeRemaining = days+\" hari\";\r\n            }else{\r\n                if(days === 0){\r\n                    timeRemaining = months+\" bulan\";\r\n                }\r\n                timeRemaining = months+\" bulan \"+days+\" hari\";\r\n            }\r\n        }else{\r\n            if(months === 0){\r\n                if(days === 0){\r\n                    timeRemaining = years+\" tahun\";\r\n                }\r\n                timeRemaining = years+\" tahun \"+days+\" hari\";\r\n            }else{\r\n                if(days === 0){\r\n                    timeRemaining = years+\" tahun \"+months+\" bulan\";\r\n                }\r\n                timeRemaining = years+\" tahun \"+months+\" bulan \"+days+\" hari\";\r\n            }\r\n        }\r\n\r\n        return timeRemaining;\r\n    }\r\n\r\n    handleChangeField(event) {\r\n        const { name, value } = event.target;\r\n        const servicesEngineerNew = this.state.servicesEngineer;\r\n        const servicesEngineerNameNew = this.state.servicesEngineerName;\r\n\r\n        if( name.substring(0,16) === \"servicesEngineer\"){\r\n            let index = Number(name.substring(16));\r\n            servicesEngineerNew[index] = value;\r\n            this.setState({ servicesEngineer: servicesEngineerNew});\r\n        }else if( name.substring(0,11) === \"serviceName\" ){\r\n            let index = Number(name.substring(11));\r\n            servicesEngineerNameNew[index] = value;\r\n            this.setState({ servicesEngineerName: servicesEngineerNameNew});\r\n        }else{\r\n            this.setState({ [name]: value });\r\n        }\r\n    }\r\n\r\n    handleEdit(order, typeEdit) {\r\n        let actualStart = moment(new Date(order.idOrderMs.actualStart)).format(\"YYYY-MM-DD\");\r\n        let actualEnd = moment(new Date(order.idOrderMs.actualEnd)).format(\"YYYY-MM-DD\");\r\n        if(typeEdit === \"perbarui\"){\r\n            this.setState({ isEdit: true , formValid: true});\r\n        }else{\r\n            this.setState({ isExtend: true });\r\n        }\r\n\r\n        this.setState({  \r\n            orderTarget: order,\r\n            actualStart: actualStart,\r\n            actualEnd: actualEnd,\r\n            totalServices: order.idOrderMs.listService.length,\r\n            timeRemaining: this.getTimeRemaining(order.idOrderMs.actualStart, order.idOrderMs.actualEnd)  \r\n        });\r\n        \r\n        if(order.idOrderMs.idUserPic !== null){\r\n            let servicesEngineer = order.idOrderMs.listService.map(service => service.idUser.id);\r\n            let servicesEngineerName = order.idOrderMs.listService.map(service => service.name);\r\n            this.setState({\r\n                picEngineerMs: order.idOrderMs.idUserPic.id, \r\n                servicesEngineer: servicesEngineer,\r\n                servicesEngineerName: servicesEngineerName,\r\n                services: order.idOrderMs.listService\r\n            });\r\n        }\r\n    }\r\n\r\n    handleCancel(event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            isEdit: false, \r\n            isReport: false, \r\n            isExtend: false, \r\n            isReportExtend: false, \r\n            totalServices: 0,\r\n            isAdded: false,\r\n            timeRemaining: null,\r\n            serviceEngineer: [],\r\n            listService: [],\r\n            services: [],\r\n            orderTarget: null,\r\n            orderTargetUpdated: null,\r\n            picEngineerMs: null,\r\n            newNoPO: null,\r\n            actualStart: null,\r\n            actualEnd: null,\r\n            isFailed: false,\r\n            isSuccess: false,\r\n            isError: false,\r\n            isValid: true\r\n        });\r\n        this.loadData();\r\n    }\r\n\r\n    getPICMS(idOrder){\r\n        let orderTarget = this.state.ordersVerified.filter(\r\n            order => order.idOrder === idOrder\r\n        );\r\n        let ms = orderTarget.map(order => {return order.idOrderMs});\r\n    \r\n        if(orderTarget !== null && ms[0] !== null){\r\n            let user = orderTarget.map(order => order.idOrderMs.idUserPic);\r\n            if(user !== null){\r\n                let pic = orderTarget.map(order => order.idOrderMs.idUserPic.fullname);\r\n                return pic;\r\n            }\r\n        }\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    getPICService(service){\r\n        if(service.idUser !== null) return service.idUser.fullname;\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    convertDateToString(date){\r\n        return date+\"T17:00:00.000+00:00\";\r\n    }\r\n\r\n    getDaysMonthsYears(date){\r\n        const dateSplit = date.split(\" \");\r\n        if(date.includes(\"tahun\")){\r\n            if(date.includes(\"bulan\")){\r\n                if(date.includes(\"hari\")) return [dateSplit[0], dateSplit[2], dateSplit[4]];\r\n                return [0, dateSplit[2], dateSplit[4]];\r\n            }\r\n            if(date.includes(\"hari\")) return [dateSplit[0], 0, dateSplit[4]];\r\n            return [0, 0, dateSplit[4]];\r\n        }else{\r\n            if(date.includes(\"bulan\")){\r\n                if(date.includes(\"hari\")) return [dateSplit[0], dateSplit[2], 0];\r\n                return [0, dateSplit[2], 0];\r\n            }\r\n            return [dateSplit[0], 0, 0];\r\n        }\r\n    }\r\n\r\n    handleFilter(event){\r\n        let newOrderList = this.state.ordersVerified;\r\n        const { value } = event.target;\r\n        if( value !== \"\" ){\r\n            newOrderList = newOrderList.filter(order => {\r\n                return (order.orderName.toLowerCase().includes(value.toLowerCase()) ||\r\n                order.noPO.toLowerCase().includes(value.toLowerCase()))\r\n            });\r\n            this.setState({ isFiltered : true });\r\n        }else{\r\n            this.setState({ isFiltered : false });\r\n        }\r\n        this.setState({ orderFiltered : newOrderList });\r\n    }\r\n\r\n    handleAddServices(listService){\r\n        this.setState({isAdded: true});\r\n        let servicesEngineer = [...this.state.servicesEngineer];\r\n        let initialTotal = listService.length;\r\n        const totalServicesNew = initialTotal+1;\r\n        this.setState({ totalServices: totalServicesNew });\r\n        servicesEngineer = servicesEngineer.concat(null);\r\n        this.setState({serviceEngineer: servicesEngineer});\r\n        this.setState({listService: [...this.state.listService, [<Form.Control type=\"text\" size=\"sm\" name={\"serviceName\"+initialTotal} \r\n        placeholder=\"masukkan nama service\" onChange={this.handleChangeField}/>, \r\n        <Form.Control as=\"select\" size=\"sm\" key={initialTotal} name={\"servicesEngineer\"+initialTotal} \r\n        value={this.state.servicesEngineer[initialTotal] === null ? this.state.users[0].id : this.state.servicesEngineer[initialTotal]}\r\n        onChange={this.handleChangeField}>{this.state.users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n        </Form.Control>]]});\r\n    }\r\n\r\n    handleCloseNotif(){\r\n        this.setState({ isFailed: false, isValid: true });\r\n    }\r\n\r\n    render() {\r\n        const { ordersVerified, isEdit, isExtend, orderTarget, users, actualStart, actualEnd, picEngineerMs, isAdded, timeRemaining, isSuccess, isFailed, isError, isValid, newNoPO,\r\n            servicesEngineer, servicesEngineerName, isReport, isReportExtend, orderFiltered, isFiltered, listService, services } = this.state;\r\n        const tableHeaders = ['No.', 'Nomor PO', 'Nama Order', 'Periode Mulai', 'Periode Berakhir', 'Waktu Tersisa', 'Aksi'];                  \r\n        \r\n        const tableRows = isFiltered ? orderFiltered.map((order) =>\r\n                        [order.noPO === null ? \"-\" : order.noPO, order.orderName, \r\n                        this.getDate(order.idOrderMs.actualStart), this.getDate(order.idOrderMs.actualEnd),\r\n                        this.getTimeRemaining(order.idOrderMs.actualStart, order.idOrderMs.actualEnd),\r\n                        <div className=\"justify-content-between\"><Button className={classes.button1} onClick={() => this.handleEdit(order, \"perbarui\")}>perbarui</Button>\r\n                        <Button className={classes.button2} onClick={() => this.handleEdit(order, \"perpanjang\")}>perpanjang</Button></div>])\r\n                        : ordersVerified.map((order) =>\r\n                        [order.noPO === null ? \"-\" : order.noPO, order.orderName, \r\n                        this.getDate(order.idOrderMs.actualStart), this.getDate(order.idOrderMs.actualEnd),\r\n                        this.getTimeRemaining(order.idOrderMs.actualStart, order.idOrderMs.actualEnd),\r\n                        <div className=\"justify-content-between\"><Button className={classes.button1} onClick={() => this.handleEdit(order, \"perbarui\")}>perbarui</Button>\r\n                        <Button className={classes.button2} onClick={() => this.handleEdit(order, \"perpanjang\")}>perpanjang</Button></div>])\r\n \r\n        const tableServiceHeaders = ['No.', 'Nama Service', 'Engineer'];\r\n        let tableServiceRows;\r\n\r\n        if(orderTarget !== null){\r\n                tableServiceRows = isAdded ? listService : services.map((service, index) =>\r\n                                    [isExtend? <Form.Control type=\"text\" size=\"sm\" name={\"serviceName\"+index} value={servicesEngineerName[index] === null ? \r\n                                    service.name : servicesEngineerName[index]} onChange={this.handleChangeField} placeholder={service.name}/>\r\n                                    : service.name, (isReport || isEdit || isReportExtend ) ? this.getPICService(service) :\r\n                                    <Form.Control as=\"select\" size=\"sm\" key={index} name={\"servicesEngineer\"+index} \r\n                                    value={servicesEngineer[index] === null ? users[0].id : servicesEngineer[index]}\r\n                                    onChange={this.handleChangeField}>\r\n                                    {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                </Form.Control>]);\r\n        }\r\n\r\n        const titleExtend = isReportExtend? \"Perpanjangan Periode Kontrak\" : \"Form Perpanjangan Periode Kontrak\";\r\n        const title = isReport? \"Rincian Periode Kontrak\" : \"Form Perbarui Periode Kontrak\";\r\n\r\n        return (\r\n            <div className={classes.container}>\r\n                <div><h1 className=\"text-center\">Daftar Order</h1></div>\r\n                <div className=\"d-flex justify-content-end\" style={{padding: 5}}><Form.Control type=\"text\" size=\"sm\" placeholder=\"Cari...\" onChange={this.handleFilter} className={classes.search}/></div>\r\n                <div><CustomizedTables headers={tableHeaders} rows={tableRows}/></div>\r\n                <Modal\r\n                    show={isEdit || isReport || isExtend || isReportExtend}\r\n                    dialogClassName=\"modal-90w\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                >\r\n                    <Modal.Header closeButton onClick={this.handleCancel}>\r\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                            {isEdit? title : titleExtend}\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                            { isFailed ? \r\n                               <Card body className={classes.card}>\r\n                                   <div className=\"d-flex justify-content-between\">\r\n                                        {isEdit?\r\n                                            <div>{isValid? \"Periode Kontrak\" : \"Periode mulai harus lebih awal dari periode akhir\"} Gagal disimpan.</div> :\r\n                                            isValid ?\r\n                                                <div>Perpanjangan Periode Kontrak Gagal disimpan.</div> :\r\n                                                <div>{newNoPO === null || newNoPO === \"\"? \"Nomor PO wajib diisi\" : \"Periode mulai harus lebih awal dari periode akhir\"}</div>\r\n                                        }\r\n                                        <Button size=\"sm\" className=\"bg-transparent border border-0 border-transparent\" onClick={this.handleCloseNotif}>x</Button>\r\n                                    </div>\r\n                                </Card>\r\n                            : <></> }\r\n                            <p>\r\n                                { orderTarget !== null ?\r\n                                <Form>\r\n                                    <Table borderless responsive=\"xl\" size=\"sm\">\r\n                                        {/* <tr>\r\n                                            <td>Id Order</td>\r\n                                            <td>: {orderTarget.idOrder}</td>\r\n                                        </tr> */}\r\n                                        <tr>\r\n                                            <td>Nomor PO</td>\r\n                                            <td>: {orderTarget.noPO === null ? \"-\" : orderTarget.noPO}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Nama Order</td>\r\n                                            <td>: {orderTarget.orderName}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Perusahaan</td>\r\n                                            <td>: {orderTarget.clientOrg}</td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td style={{fontWeight: 'bold'}}>Managed Service</td>\r\n                                            {isExtend ? <td className=\"d-flex justify-content-end\">\r\n                                            <Button className={classes.button1} onClick={() => this.handleAddServices(tableServiceRows)}>\r\n                                                + Tambah Services\r\n                                                </Button></td>\r\n                                                : <></>}\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Services</td>\r\n                                            <td>\r\n                                                <><CustomizedTables headers={tableServiceHeaders} rows={tableServiceRows}></CustomizedTables></>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>PIC Engineer</td>\r\n                                            {isExtend ?\r\n                                            <td><Form.Control as=\"select\" size=\"sm\" name=\"picEngineerMs\" value={picEngineerMs === null ? users[0].id : picEngineerMs} onChange={this.handleChangeField}>\r\n                                                    {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                                </Form.Control></td>\r\n                                            : <td>: {this.getPICMS(orderTarget.idOrder)}</td>}\r\n                                        </tr>\r\n                                        <tr>\r\n                                            { isExtend ? <>\r\n                                            <td className=\"d-flex\"><p>Nomor PO Baru</p><p style={{color: \"red\"}}>*</p></td>\r\n                                            <td><Form.Control type=\"text\" size=\"sm\" name=\"newNoPO\" onChange={this.handleChangeField} placeholder=\"masukkan nomor PO baru\"/></td></> : <></> } \r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Periode Mulai</td>\r\n                                            {isReport || isReportExtend ? \r\n                                            <td>: {this.getDate(actualStart)}</td> :\r\n                                            <td><Form.Control type=\"date\" size=\"sm\" name=\"actualStart\" value={actualStart} onChange={this.handleChangeField}/></td> }\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Periode Berakhir</td>\r\n                                            {isReport || isReportExtend  ? \r\n                                            <td>: {this.getDate(actualEnd)}</td> :\r\n                                            <td><Form.Control type=\"date\" size=\"sm\" name=\"actualEnd\" value={actualEnd} onChange={this.handleChangeField}/></td> }\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Waktu Tersisa</td> \r\n                                            <td>: {timeRemaining}</td> \r\n                                        </tr>\r\n                                        {isReport || isReportExtend ? <></> :\r\n                                        <tr>\r\n                                            <td style={{color: \"red\"}}>*Wajib diisi</td>\r\n                                            <td className=\"d-flex justify-content-end\">\r\n                                                <Button className={classes.button1} onClick={this.handleSubmit}>\r\n                                                    simpan\r\n                                                </Button>\r\n                                            </td>\r\n                                        </tr> }\r\n                                    </Table>\r\n                                </Form> : <></>}\r\n                            </p>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                <Modal\r\n                    show={isSuccess || isError}\r\n                    dialogClassName=\"modal-90w\"\r\n                    aria-labelledby=\"contained-modal-title-vcenter\"\r\n                >\r\n                     <Modal.Header closeButton onClick={this.handleCancel}>\r\n                        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                            Notification\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {isSuccess?\r\n                        <>\r\n                            <div className=\"d-flex justify-content-center\">{isEdit? \"Periode Kontrak\" : \"Perpanjangan Periode Kontrak\"} berhasil disimpan.</div><br></br>\r\n                            <div className=\"d-flex justify-content-center\">\r\n                                <Button variant=\"primary\" className={classes.button1} onClick={this.handleReport}>\r\n                                    Kembali\r\n                                </Button>\r\n                            </div>\r\n                        </> :\r\n                        <>\r\n                        <div className=\"d-flex justify-content-center\">Oops terjadi masalah pada server</div><br></br>\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Button variant=\"primary\" className={classes.button1} onClick={this.handleCancel}>\r\n                                Kembali\r\n                            </Button>\r\n                        </div>\r\n                        </>}\r\n                    </Modal.Body>\r\n                </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PeriodeKontrak;","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Login\\index.js",["70"],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\Homepage\\index.js",["71"],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\LaporanInstalasiMaintenance\\index.js",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":2,"column":21,"nodeType":"78","messageId":"79","endLine":2,"endColumn":22},{"ruleId":"76","severity":1,"message":"80","line":4,"column":8,"nodeType":"78","messageId":"79","endLine":4,"endColumn":25},{"ruleId":"72","replacedBy":"81"},{"ruleId":"74","replacedBy":"82"},{"ruleId":"76","severity":1,"message":"83","line":158,"column":31,"nodeType":"78","messageId":"79","endLine":158,"endColumn":36},{"ruleId":"76","severity":1,"message":"84","line":1,"column":17,"nodeType":"78","messageId":"79","endLine":1,"endColumn":26},{"ruleId":"76","severity":1,"message":"85","line":9,"column":8,"nodeType":"78","messageId":"79","endLine":9,"endColumn":15},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'A' is defined but never used.","Identifier","unusedVar","'CustomizedButtons' is defined but never used.",["86"],["87"],"'newMs' is assigned a value but never used.","'Component' is defined but never used.","'classes' is defined but never used.","no-global-assign","no-unsafe-negation"]