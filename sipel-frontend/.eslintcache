[{"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\index.js":"1","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\App.js":"3","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Layout\\index.js":"4","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\containers\\PenugasanEngineer\\index.js":"5","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\APIConfig.js":"6","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Button\\index.js":"7","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Modal\\index.js":"8","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Table\\index.js":"9","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Backdrop\\index.js":"10","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Navbar\\index.js":"11","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\containers\\ChangeStatusOrder\\index.js":"12"},{"size":517,"mtime":1618459489813,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1618459489813,"results":"15","hashOfConfig":"14"},{"size":4623,"mtime":1619762684401,"results":"16","hashOfConfig":"14"},{"size":178,"mtime":1619192253984,"results":"17","hashOfConfig":"14"},{"size":19574,"mtime":1619532671543,"results":"18","hashOfConfig":"14"},{"size":143,"mtime":1619192253942,"results":"19","hashOfConfig":"14"},{"size":802,"mtime":1619431890972,"results":"20","hashOfConfig":"14"},{"size":478,"mtime":1619192253985,"results":"21","hashOfConfig":"14"},{"size":2994,"mtime":1619192254014,"results":"22","hashOfConfig":"14"},{"size":259,"mtime":1619192253968,"results":"23","hashOfConfig":"14"},{"size":1336,"mtime":1619258282915,"results":"24","hashOfConfig":"14"},{"size":19740,"mtime":1619772598304,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"uvqcsq",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\index.js",[],["56","57"],"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\App.js",["58","59"],"// import logo from './logo.svg';\r\nimport './App.css';\r\nimport { useRoutes, A } from \"hookrouter\";\r\n// import { render } from '@testing-library/react';\r\nimport React, { Component } from \"react\";\r\nimport Layout from \"./components/Layout\";\r\nimport PenugasanEngineer from \"./containers/PenugasanEngineer\";\r\nimport ChangeStatusOrder from \"./containers/ChangeStatusOrder\";\r\nimport { Navbar, NavDropdown, Nav } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport homepage from \"./assets/homepage.png\";\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nconst routes = {\r\n    \"/\": () =>\r\n        <div>\r\n            <div style={{ margin: 75 }}>\r\n                <table>\r\n                    <tr>\r\n                        <td>\r\n                            <div style={{ margin: 30 }}>\r\n                                <h3 style={{ color: '#F7873F' }}>Hello, name_here</h3>\r\n                                <h1 style={{ color: '#2F3F58' }}>Selamat Datang di Sistem Informasi Pengelolaan Layanan</h1>\r\n                            </div>\r\n                        </td>\r\n                        <td><img src={homepage} alt=\"homepage\"/></td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        </div>,\r\n    \"/produksi/penugasan\": () => <PenugasanEngineer />,\r\n    \"/order/status-order\": () => <ChangeStatusOrder />\r\n};\r\n\r\nfunction App(){\r\n\r\n    const routeResult = useRoutes(routes);\r\n\r\n    return (\r\n        <Layout>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\" id=\"navbar\">\r\n                <Navbar.Brand href=\"/\" style={{ textDecoration: 'none', color: '#F7873F' }}>SIPEL</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#dashboard\">Dashboard</Nav.Link>\r\n                        <NavDropdown title=\"Order\" id=\"collasible-nav-dropdown\">\r\n                            <NavDropdown.Item href=\"/order/status-order\">Status Order</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        <NavDropdown title=\"Produksi\" id=\"collasible-nav-dropdown\">\r\n                            <NavDropdown.Item href=\"/produksi/penugasan\">Penugasan</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#produksi/progress-delivery\">Progress Delivery</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"/produksi/periodeKontrak\">Periode Kontrak</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#produksi/maintenance\">Maintenance</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        <NavDropdown title=\"Laporan\" id=\"collasible-nav-dropdown\">\r\n                            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                            <NavDropdown.Divider />\r\n                            <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                        <Nav.Link href=\"#halamanAdmin\">Halaman Admin</Nav.Link>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Nav.Link href=\"#deets\">name_here</Nav.Link>\r\n                        {/* <Nav.Link eventKey={2} href=\"#memes\">\r\n                  Dank memes\r\n                </Nav.Link> */}\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n            { routeResult }\r\n        </Layout>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Layout\\index.js",[],"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\containers\\PenugasanEngineer\\index.js",["60","61"],"import React, { Component } from \"react\";\r\nimport APIConfig from \"../../APIConfig\";\r\nimport CustomizedTables from \"../../components/Table\";\r\nimport CustomizedButtons from \"../../components/Button\";\r\nimport Modal from \"../../components/Modal\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nclass PenugasanEngineer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ordersVerified: [ \r\n            // {items : [10,  '000010/I/PO-LA/2021', 'PIMS-190621/PT.Aplikasinusa', 'Project Installation (PI), Managed Service (MS)', 'Belum ditugaskan', 'Belum ditugaskan']},\r\n            // {items : [9,  '000010/I/PO-LA/2021', 'PIMS-190621/PT.Aplikasinusa', 'Project Installation (PI), Managed Service (MS)', 'Belum ditugaskan', 'Belum ditugaskan']}\r\n            ],\r\n            isLoading: false,\r\n            isEdit: false,\r\n            // isChange: false,\r\n            orderTarget: null,\r\n            users: [],\r\n            picEngineerPi: null,\r\n            picEngineerMs: null,\r\n            servicesEngineer: [],\r\n            isReport: false,\r\n            // isNotif: false,\r\n            // isError: false,\r\n            orderFiltered: [],\r\n            isFiltered: false\r\n            // listService: [],\r\n            // services: [],\r\n        };\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleReport = this.handleReport.bind(this);\r\n        this.handleFilter = this.handleFilter.bind(this);\r\n        // this.handleCloseNotif = this.handleCloseNotif.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n    \r\n    async loadData() {\r\n        try {\r\n            const orders = await APIConfig.get(\"/ordersVerified\");\r\n            const users = await APIConfig.get(\"/users\");\r\n            // const services = await APIConfig.get(\"/services\");\r\n            console.log(orders.data);\r\n            console.log(users.data);\r\n            this.setState({ ordersVerified: orders.data, users: users.data});\r\n            \r\n        } catch (error) {\r\n            alert(\"Oops terjadi masalah pada server\");\r\n            this.setState({ isError: true });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        try {\r\n            if(this.state.orderTarget.projectInstallation === true){\r\n                // console.log(this.state.orderTarget.idOrderPi);\r\n                const pi = this.state.orderTarget.idOrderPi;\r\n                const dataPi = {\r\n                    idOrderPi: pi.idOrderPi,\r\n                    idUserEng: this.state.picEngineerPi,\r\n                    percentage: pi.percentage,\r\n                    startPI: pi.startPI,\r\n                    deadline: pi.deadline,\r\n                    dateClosedPI: pi.dateClosedPI\r\n                }\r\n                // console.log(dataPi);\r\n                await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/pi/${this.state.orderTarget.idOrderPi.idOrderPi}/updatePIC`, dataPi);\r\n                // const dataResponsePi = await responsePi.json();\r\n            }\r\n            if(this.state.orderTarget.managedService === true){\r\n                const ms = this.state.orderTarget.idOrderMs;\r\n                const dataMs = {\r\n                    idOrderMs: ms.idOrderMs,\r\n                    idUserPic: this.state.picEngineerMs,\r\n                    actualStart: ms.actualStart,\r\n                    actualEnd: ms.actualEnd,\r\n                    activated: ms.activated,\r\n                    timeRemaining: ms.timeRemaining,\r\n                    dateClosedMS: ms.dateClosedMS\r\n                }\r\n                // console.log(dataMs);\r\n                await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/updatePIC`, dataMs);\r\n                let listService = this.getListService(this.state.orderTarget);\r\n                console.log(this.state.servicesEngineer);\r\n                for(let i=0; i<this.state.servicesEngineer.length; i++){\r\n                    console.log(i);\r\n                    let service = listService[i];\r\n                    console.log(service);\r\n                    const dataService = {\r\n                        idService: service.idService,\r\n                        name: service.name,\r\n                        idUser: this.state.servicesEngineer[i]\r\n                    }\r\n                    console.log(this.state.orderTarget.idOrderMs.idOrderMs);\r\n                    // console.log(dataService);\r\n                    await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/service/${service.idService}/updateEngineer`, dataService);\r\n                    // console.log(dataService);\r\n                }\r\n            }\r\n            this.loadData();\r\n        } catch (error) {\r\n            alert(\"Penugasan Engineer gagal disimpan\");\r\n            // this.setState({ isError: true });\r\n            console.log(error);\r\n        }\r\n        this.handleReport(event);\r\n        // this.handleCancel(event);\r\n        // this.setState({ \r\n        //     orderTarget: null,\r\n        //     users: [],\r\n        //     picEngineerPi: null,\r\n        //     picEngineerMs: null,\r\n        //     servicesEngineer: []\r\n        // });\r\n    }\r\n\r\n    handleReport(event){\r\n        event.preventDefault();\r\n        // this.setState({isEdit: false, isReport: true, isNotif: true});\r\n        this.setState({isEdit: false, isReport: true});\r\n        alert(\"Penugasan Engineer berhasil disimpan\");\r\n    }\r\n\r\n    checkTypeOrder(pi, ms){\r\n        if(pi === true && ms === true){\r\n            return \"Project Installation, Managed Service\";\r\n        }else if(pi === true){\r\n            return \"Project Installation\";\r\n        }else if(ms === true){\r\n            return \"Managed Service\";\r\n        }\r\n    }\r\n\r\n    getPICPI(idOrder){\r\n        let orderTarget = this.state.ordersVerified.filter(\r\n            order => order.idOrder === idOrder\r\n        );\r\n        let pi = orderTarget.map(order => {return order.idOrderPi});\r\n        // console.log(pi[0]);\r\n        // console.log(orderTarget !== null && pi[0] !== null);\r\n    \r\n        if(orderTarget !== null && pi[0] !== null){\r\n            let user = orderTarget.map(order => order.idOrderPi.idUserEng);\r\n            if(user !== null){\r\n                let pic = orderTarget.map(order => order.idOrderPi.idUserEng.fullname);\r\n                return pic;\r\n            }\r\n        }\r\n\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    getPICMS(idOrder){\r\n        let orderTarget = this.state.ordersVerified.filter(\r\n            order => order.idOrder === idOrder\r\n        );\r\n        let ms = orderTarget.map(order => {return order.idOrderMs});\r\n    \r\n        if(orderTarget !== null && ms[0] !== null){\r\n            let user = orderTarget.map(order => order.idOrderMs.idUserPic);\r\n            if(user !== null){\r\n                let pic = orderTarget.map(order => order.idOrderMs.idUserPic.fullname);\r\n                return pic;\r\n            }\r\n        }\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    getPICService(service){\r\n        if(service.idUser !== null) return service.idUser.fullname;\r\n        return \"Belum ditugaskan\";\r\n    }\r\n    \r\n    handleEdit(order) {\r\n        // const { value } = event.target;\r\n        // console.log(event.target);\r\n        // console.log(value);\r\n        // const order = this.getOrder(value);\r\n        this.setState({\r\n            isEdit: true,\r\n            orderTarget: order\r\n        });\r\n        if(order.idOrderPi !== null){\r\n            if(order.idOrderPi.idUserEng !== null){\r\n                this.setState({picEngineerPi: order.idOrderPi.idUserEng.id});\r\n            }\r\n        }\r\n        if(order.idOrderMs !== null){\r\n            if(order.idOrderMs.idUserPic !== null){\r\n                let servicesEngineer = order.idOrderMs.listService.map(service => service.idUser.id);\r\n                this.setState({\r\n                    picEngineerMs: order.idOrderMs.idUserPic.id, \r\n                    servicesEngineer: servicesEngineer\r\n                });\r\n            }\r\n        }\r\n        // console.log(this.state.orderTarget);\r\n        // console.log(this.state.picEngineerPi);\r\n    }\r\n\r\n    handleCancel(event) {\r\n        event.preventDefault();\r\n        this.setState({isEdit: false, isReport: false});\r\n    }\r\n\r\n    // handleCloseNotif(event){\r\n    //     event.preventDefault();\r\n    //     this.setState({isNotif: false, isError: false});\r\n    // }\r\n\r\n    handleChangeField(event) {\r\n        const { name, value } = event.target;\r\n        console.log(name, value);\r\n        const servicesEngineerNew = this.state.servicesEngineer;\r\n        if( name.substring(0,16) === \"servicesEngineer\"){\r\n            let index = Number(name.substring(16));\r\n            servicesEngineerNew[index] = value;\r\n            this.setState({ servicesEngineer: servicesEngineerNew});\r\n        }else{\r\n            this.setState({ [name]: value});\r\n        }\r\n    }\r\n\r\n    getListService(order){\r\n        if(order.idOrderMs !== null){\r\n            return order.idOrderMs.listService;\r\n        }\r\n    }\r\n\r\n    getOrder(idOrder){\r\n        const orders = this.state.ordersVerified;\r\n        for(let i=0; i<=orders.length; i++){\r\n            if(orders[i].idOrder === idOrder){\r\n                return orders[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFilter(event){\r\n        let newOrderList = this.state.ordersVerified;\r\n        const { value } = event.target;\r\n        if( value !== \"\" ){\r\n            console.log(this.checkTypeOrder(this.state.ordersVerified[0].projectInstallation, this.state.ordersVerified[0].managedService).toLowerCase());\r\n            console.log(this.getPICPI(this.state.ordersVerified[0].idOrder)[0]);\r\n            // newOrderList = this.state.ordersVerified.filter(order => {\r\n            //     return order.noPO !== null ? order.noPO.toLowerCase().includes(value.toLowerCase()) : \"\".toLowerCase().includes(value.toLowerCase()) || \r\n            //     order.orderName.toLowerCase().includes(value.toLowerCase()) ||\r\n            //     this.checkTypeOrder(order.projectInstallation, order.managedService).toLowerCase().includes(value.toLowerCase()) ||\r\n            //     order.idOrderPi !== null ? this.getPICPI(order.idOrder)[0].toLowerCase().includes(value.toLowerCase())\r\n            //     : \"\".toLowerCase().includes(value.toLowerCase()) ||\r\n            //     order.idOrderMs !== null ? this.getPICMS(order.idOrder)[0].toLowerCase().includes(value.toLowerCase()) : \"\".toLowerCase().includes(value.toLowerCase())\r\n            // });\r\n            newOrderList = this.state.ordersVerified.filter(order => {\r\n                return order.orderName.toLowerCase().includes(value.toLowerCase())\r\n            });\r\n            // console.log( this.state.ordersVerified[2].orderName.toLowerCase().includes(value.toLowerCase()))\r\n            this.setState({ isFiltered : true });\r\n        }else{\r\n            this.setState({ isFiltered : false });\r\n        }\r\n        this.setState({ orderFiltered : newOrderList });\r\n    }\r\n\r\n    render() {\r\n        const { ordersVerified, isEdit, orderTarget, users, picEngineerPi,\r\n             picEngineerMs, servicesEngineer, isReport, isNotif, isError, orderFiltered, isFiltered } = this.state;\r\n        console.log(orderTarget);\r\n        console.log(picEngineerPi);\r\n        console.log(servicesEngineer);\r\n        const tableHeaders = ['No.', 'Id Order', 'Nomor PO', 'Nama Order', 'Tipe', 'PIC PI', 'PIC MS', 'Aksi'];                  \r\n        const tableRows = isFiltered ? orderFiltered.map((order) =>\r\n                        [order.idOrder, order.noPO === null ? \"-\" : order.noPO, order.orderName, \r\n                        this.checkTypeOrder(order.projectInstallation, order.managedService), \r\n                        this.getPICPI(order.idOrder), this.getPICMS(order.idOrder),\r\n                        <CustomizedButtons variant=\"contained\" size=\"small\" color=\"#FD693E\"\r\n                        onClick={() => this.handleEdit(order)}>perbarui</CustomizedButtons>])\r\n                        : ordersVerified.map((order) =>\r\n                        [order.idOrder, order.noPO === null ? \"-\" : order.noPO, order.orderName,\r\n                        this.checkTypeOrder(order.projectInstallation, order.managedService),\r\n                        this.getPICPI(order.idOrder), this.getPICMS(order.idOrder),\r\n                        <CustomizedButtons variant=\"contained\" size=\"small\" color=\"#FD693E\"\r\n                        onClick={() => this.handleEdit(order)}>perbarui</CustomizedButtons>])\r\n        const tableServiceHeaders = ['No.', 'Nama Service', 'Engineer'];\r\n        let tableServiceRows;\r\n\r\n        if(orderTarget !== null){\r\n            if(orderTarget.idOrderPi !== null){\r\n            }\r\n            if(orderTarget.idOrderMs !== null){\r\n                tableServiceRows = orderTarget.idOrderMs.listService.map((service, index) =>\r\n                                        [service.name, isReport ? this.getPICService(service) :\r\n                                        <Form.Control\r\n                                            as=\"select\"\r\n                                            size=\"lg\"\r\n                                            key={index}\r\n                                            name={\"servicesEngineer\"+index}\r\n                                            value={servicesEngineer[index] === null ? users[0].id : servicesEngineer[index]}\r\n                                            onChange={this.handleChangeField}>\r\n                                            {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                        </Form.Control>]);\r\n            }\r\n        }\r\n\r\n        const title = isReport? \"Penugasan Engineer\" : \"Form Penugasan Engineer\";\r\n\r\n        const notification = isError ? \"Penugasan Engineer Gagal disimpan\" : \"Penugasan Engineer Berhasil disimpan\";\r\n\r\n        return (\r\n            <div style={{justifyContent: \"space-around\"}}>\r\n                <div>\r\n                    {/* <tr> */}\r\n                        <div><h1>Daftar Order</h1></div>\r\n                        <div><Form.Control type=\"text\" placeholder=\"Cari...\" onChange={this.handleFilter} id=\"search\"/></div>\r\n                    {/* </tr> */}\r\n                </div>\r\n                <div style={{width: 1300}}><CustomizedTables headers={tableHeaders} rows={tableRows}/></div>\r\n                {/* <Modal show={isNotif} style={{modal : {zIndex: 900}}}>\r\n                    {notification}\r\n                    <a href=\"#\" class=\"close\" onClick={()=>this.handleCloseNotif}>x</a>\r\n                    {console.log(isEdit, isReport, isNotif)}\r\n                </Modal> */}\r\n                <Modal show={isEdit || isReport} style={{modal : {zIndex: 200}}}>\r\n                    <div style={{ justifyContent: \"end\"}}><a href=\"#\" class=\"close\" onClick={this.handleCancel}>x</a></div>\r\n                    <h3 id='titleform' >{title}</h3>\r\n                    {console.log(isEdit, isReport, isNotif)}\r\n                    {orderTarget !== null ?\r\n                        <><Form>\r\n                            <table>\r\n                                <tr>\r\n                                    <td>Id Order</td>\r\n                                    <td>: {orderTarget.idOrder}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Nomor PO</td>\r\n                                    <td>: {orderTarget.noPO === null? \"-\" : orderTarget.noPO}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Nama Order</td>\r\n                                    <td>: {orderTarget.orderName}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Perusahaan</td>\r\n                                    <td>: {orderTarget.clientOrg}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Tipe</td>\r\n                                    <td>{this.checkTypeOrder(orderTarget.projectInstallation, orderTarget.managedService)}</td>\r\n                                </tr>\r\n                                { orderTarget.projectInstallation ?\r\n                                    <><tr>\r\n                                        <td style={{fontWeight: 'bold'}}>Project Installation</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>PIC Engineer</td>\r\n                                        {/* {console.log(picEngineerPi.id === null), console.log(users[0].id), console.log(picEngineerPi), console.log(users[0].id === picEngineerPi)} */}\r\n                                        {isReport ?\r\n                                        <td>: {this.getPICPI(orderTarget.idOrder)}</td> :\r\n                                        <td><Form.Control as=\"select\" size=\"lg\" name=\"picEngineerPi\" value={picEngineerPi === null ? users[0].id : picEngineerPi} onChange={this.handleChangeField}>\r\n                                                {users.map((user, index) => <option key={index} value={user.id}>{user.fullname}</option>)}\r\n                                            </Form.Control></td>}\r\n                                    </tr></>\r\n                                : <></>}\r\n                                { orderTarget.managedService ?\r\n                                <><tr>\r\n                                    <td style={{fontWeight: 'bold'}}>Managed Service</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Services</td>\r\n                                    <td>\r\n                                        <><CustomizedTables headers={tableServiceHeaders} rows={tableServiceRows}></CustomizedTables></>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>PIC Engineer</td>\r\n                                    {isReport ?\r\n                                        <td>: {this.getPICMS(orderTarget.idOrder)}</td> :\r\n                                    <td><Form.Control as=\"select\" size=\"lg\" name=\"picEngineerMs\" value={picEngineerMs === null ? users[0].id : picEngineerMs} onChange={this.handleChangeField}>\r\n                                            {/* {listServiceEngineerNew.map(user =><option value={user[1]}>{user[2]}</option>)} */}\r\n                                            {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                        </Form.Control></td>}\r\n                                </tr></>\r\n                                : <></>}\r\n                            </table>\r\n                            {isReport ? <></> :\r\n                            <div style={{alignItems:'right'}}><CustomizedButtons variant=\"contained\" size=\"medium\" color=\"#FD693E\" onClick={this.handleSubmit}>\r\n                                simpan\r\n                            </CustomizedButtons></div>}\r\n                        </Form></>\r\n                    : <></> }\r\n                </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PenugasanEngineer;","C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\APIConfig.js",[],"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Button\\index.js",[],"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Modal\\index.js",[],"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Table\\index.js",[],"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Backdrop\\index.js",[],"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\components\\Navbar\\index.js",["62","63","64"],"import React, { useState } from \"react\";\r\nimport clases from \"./styles.module.css\";\r\nimport CustomizedButtons from \"../Button\";\r\n\r\nconst Navbar = () => {\r\n    const { click,setClick } = useState(false);\r\n    return(\r\n        <nav className={clases.navbar}>\r\n            <h1>SIPEL</h1>\r\n            <div className=\"links\">\r\n                {/*<CustomizedButtons variant=\"contained\" size=\"large\" color=\"#FD693E\" >Dashboard</CustomizedButtons>\r\n                <CustomizedButtons variant=\"contained\" size=\"large\" color=\"#FD693E\" >Order</CustomizedButtons>\r\n                <CustomizedButtons variant=\"contained\" size=\"large\" color=\"#FD693E\" >Produksi</CustomizedButtons>\r\n                <CustomizedButtons variant=\"contained\" size=\"large\" color=\"#FD693E\" >Laporan</CustomizedButtons>\r\n                <CustomizedButtons variant=\"contained\" size=\"large\" color=\"#FD693E\" >Halaman Admin</CustomizedButtons>*/}\r\n                <a className=\"nav-dashboard\" href=\"/\">Dashboard</a>\r\n                <a className=\"nav-order\" href=\"/create\" >Order</a>\r\n                <a className=\"nav-produksi\" href=\"/create\" >Produksi</a>\r\n                <a className=\"nav-laporan\" href=\"/create\" >Laporan</a>\r\n                <a className=\"nav-admin\" href=\"/create\" >Halaman Admin</a>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;",["65","66"],"C:\\Users\\ME\\Documents\\impl-propen\\propen-a01-sipel-impl1\\sipel-frontend\\src\\containers\\ChangeStatusOrder\\index.js",["67","68","69","70"],"import React, { Component } from \"react\";\r\nimport APIConfig from \"../../APIConfig\";\r\nimport CustomizedTables from \"../../components/Table\";\r\nimport CustomizedButtons from \"../../components/Button\";\r\nimport Modal from \"../../components/Modal\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nclass ChangeStatusOrder extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ordersVerified: [],\r\n            isLoading: false,\r\n            isEdit: false,\r\n            isSubmitted: false,\r\n            isErrorMsClosed: false,\r\n            isErrorPiClosed: false,\r\n            orderTarget: null,\r\n            statusMaintenances: [],\r\n            statusMs: \"\",\r\n            statusPi: \"\"\r\n\r\n        };\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleErrorMsClosed = this.handleErrorMsClosed.bind(this);\r\n        this.handleErrorPiClosed = this.handleErrorPiClosed.bind(this);\r\n        this.handleSubmitted = this.handleSubmitted.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n\r\n    async loadData() {\r\n        try {\r\n            const orders = await APIConfig.get(\"/ordersVerified\");\r\n            // const services = await APIConfig.get(\"/services\");\r\n            console.log(orders.data);\r\n            this.setState({ ordersVerified: orders.data});\r\n\r\n        } catch (error) {\r\n            alert(\"Oops terjadi masalah pada server\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        console.log(this.state.orderTarget);\r\n        try {\r\n            if(this.state.orderTarget.projectInstallation === true){\r\n                // console.log(this.state.orderTarget.idOrderPi);\r\n                const pi = this.state.orderTarget.idOrderPi;\r\n                if (this.state.statusPi === \"Closed\"){\r\n                    if (pi.percentage === 100){\r\n                        const dataPi = {\r\n                            idOrderPi: pi.idOrderPi,\r\n                            idUserEng: pi.picEngineerPi,\r\n                            percentage: pi.percentage,\r\n                            startPI: pi.startPI,\r\n                            deadline: pi.deadline,\r\n                            dateClosedPI: pi.dateClosedPI,\r\n                            status: this.state.statusPi\r\n                        }\r\n                        console.log(dataPi);\r\n                        await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/pi/${this.state.orderTarget.idOrderPi.idOrderPi}/updateStatus`, dataPi);\r\n                        this.handleSubmitted(event, this.state.orderTarget)\r\n                        this.setState({isEdit: false});\r\n                    } else {\r\n                        this.handleErrorPiClosed(event);\r\n                    }\r\n                } else {\r\n                    const dataPi = {\r\n                        idOrderPi: pi.idOrderPi,\r\n                        idUserEng: pi.picEngineerPi,\r\n                        percentage: pi.percentage,\r\n                        startPI: pi.startPI,\r\n                        deadline: pi.deadline,\r\n                        dateClosedPI: pi.dateClosedPI,\r\n                        status: this.state.statusPi\r\n                    }\r\n                    console.log(dataPi);\r\n                    await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/pi/${this.state.orderTarget.idOrderPi.idOrderPi}/updateStatus`, dataPi);\r\n                    this.handleSubmitted(event, this.state.orderTarget)\r\n                    this.setState({isEdit: false});\r\n                }\r\n            }\r\n            if(this.state.orderTarget.managedService === true){\r\n                const ms = this.state.orderTarget.idOrderMs;\r\n                if (this.state.statusMs === \"Closed\"){\r\n                    let listMaintenance = this.state.orderTarget.idOrderMs.listMaintenance;\r\n                    for(let i=0; i<listMaintenance.length; i++){\r\n                        let maintenance = listMaintenance[i];\r\n                        let booleanStatus = false;\r\n                        if (this.state.statusMaintenances[i] === \"Maintained\"){\r\n                            booleanStatus = true;\r\n                        }\r\n                        const dataMaintenance = {\r\n                            idMaintenance: maintenance.idMaintenance,\r\n                            dateMn: maintenance.dateMn,\r\n                            maintained: booleanStatus\r\n                        }\r\n                        await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/maintenance/${maintenance.idMaintenance}/updateStatus`, dataMaintenance);\r\n                    }\r\n                    console.log(ms.listMaintenance);\r\n                    const msUpdated = await APIConfig.get(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}`);\r\n                    console.log(msUpdated.data.listMaintenance);\r\n                    let statusAllMaintenance = true;\r\n                    let listMaintenanceChecked = msUpdated.data.listMaintenance;\r\n                    for(let i=0; i<listMaintenanceChecked.length; i++){\r\n                        let maintenanceCheck = listMaintenanceChecked[i];\r\n                        if (maintenanceCheck.maintained === false){\r\n                            statusAllMaintenance = false;\r\n                        }\r\n                    }\r\n                    if (statusAllMaintenance === true) {\r\n\r\n\r\n                        const dataMs = {\r\n                            idOrderMs: ms.idOrderMs,\r\n                            idUserPic: ms.picEngineerMs,\r\n                            actualStart: ms.actualStart,\r\n                            actualEnd: ms.actualEnd,\r\n                            activated: ms.activated,\r\n                            timeRemaining: ms.timeRemaining,\r\n                            dateClosedMS: ms.dateClosedMS,\r\n                            status: this.state.statusMs\r\n                        }\r\n                        // console.log(dataMs);\r\n                        await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/updateStatus`, dataMs);\r\n                        this.handleSubmitted(event, this.state.orderTarget)\r\n                        this.setState({isEdit: false});\r\n                    } else {\r\n                        this.handleErrorMsClosed(event);\r\n                    }\r\n                } else {\r\n                    let listMaintenance = this.state.orderTarget.idOrderMs.listMaintenance;\r\n                    for(let i=0; i<listMaintenance.length; i++){\r\n                        let maintenance = listMaintenance[i];\r\n                        let booleanStatus = false;\r\n                        if (this.state.statusMaintenances[i] === \"Maintained\"){\r\n                            booleanStatus = true;\r\n                        }\r\n                        const dataMaintenance = {\r\n                            idMaintenance: maintenance.idMaintenance,\r\n                            dateMn: maintenance.dateMn,\r\n                            maintained: booleanStatus\r\n                        }\r\n                        await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/maintenance/${maintenance.idMaintenance}/updateStatus`, dataMaintenance);\r\n                    }\r\n\r\n                    const dataMs = {\r\n                        idOrderMs: ms.idOrderMs,\r\n                        idUserPic: ms.picEngineerMs,\r\n                        actualStart: ms.actualStart,\r\n                        actualEnd: ms.actualEnd,\r\n                        activated: ms.activated,\r\n                        timeRemaining: ms.timeRemaining,\r\n                        dateClosedMS: ms.dateClosedMS,\r\n                        status: this.state.statusMs\r\n                    }\r\n                    // console.log(dataMs);\r\n                    await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/updateStatus`, dataMs);\r\n                    this.handleSubmitted(event, this.state.orderTarget)\r\n                    this.setState({isEdit: false});\r\n                }\r\n\r\n            }\r\n            await this.loadData()\r\n\r\n\r\n        } catch (error) {\r\n            alert(\"Perubahan status order gagal disimpan\");\r\n            // this.setState({ isError: true });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    handleErrorMsClosed(event) {\r\n        event.preventDefault();\r\n        this.setState({isErrorMsClosed: true});\r\n    }\r\n\r\n    handleErrorPiClosed(event) {\r\n        event.preventDefault();\r\n        this.setState({isErrorPiClosed: true});\r\n    }\r\n\r\n    handleSubmitted(event, order) {\r\n        event.preventDefault();\r\n        this.setState({isSubmitted: true, orderTarget: order});\r\n    }\r\n\r\n    checkTypeOrder(pi, ms){\r\n        if(pi === true && ms === true){\r\n            return \"Project Installation, Managed Service\";\r\n        }else if(pi === true){\r\n            return \"Project Installation\";\r\n        }else if(ms === true){\r\n            return \"Managed Service\";\r\n        }\r\n    }\r\n\r\n    checkStatus(order){\r\n        if (order.projectInstallation === true){\r\n            return order.idOrderPi.status;\r\n        }\r\n        else if (order.managedService === true){\r\n            return order.idOrderMs.status;\r\n        }\r\n    }\r\n\r\n    handleEdit(order, listMaintenance) {\r\n        this.setState({isEdit: true, orderTarget: order, listMaintenance: listMaintenance});\r\n        const statusMaintenancesUpdated = this.state.statusMaintenances;\r\n        if (order.projectInstallation === true){\r\n            this.setState({statusPi: order.idOrderPi.status});\r\n        }\r\n        else if (order.managedService === true){\r\n            this.setState({statusMs: order.idOrderMs.status});\r\n            listMaintenance = order.idOrderMs.listMaintenance;\r\n            for(let i=0; i<listMaintenance.length; i++){\r\n\r\n                let maintenance = listMaintenance[i];\r\n                if (maintenance.maintained === true){\r\n                    statusMaintenancesUpdated[i] = \"Maintained\";\r\n                } else {\r\n                    statusMaintenancesUpdated[i] = \"Not Maintained\";\r\n                }\r\n            }\r\n            console.log(statusMaintenancesUpdated);\r\n            this.setState({statusMaintenances: statusMaintenancesUpdated})\r\n        }\r\n    }\r\n\r\n    handleCancel(event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            isEdit: false,\r\n            isErrorMsClosed: false,\r\n            isErrorPiClosed: false,\r\n            isSubmitted: false\r\n        });\r\n    }\r\n\r\n    handleChangeField(event) {\r\n        const { name, value } = event.target;\r\n        console.log(name, value);\r\n        const statusMaintenancesUpdated = this.state.statusMaintenances;\r\n        if( name.substring(0,17) === \"statusMaintenance\"){\r\n            let index = Number(name.substring(17));\r\n            statusMaintenancesUpdated[index] = value;\r\n            this.setState({ statusMaintenances: statusMaintenancesUpdated});\r\n        }else{\r\n            this.setState({ [name]: value});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            ordersVerified,\r\n            isEdit,\r\n            isErrorMsClosed,\r\n            isErrorPiClosed,\r\n            isSubmitted,\r\n            orderTarget,\r\n            statusMaintenances,\r\n            statusMs,\r\n            statusPi,\r\n        } = this.state;\r\n        let listMaintenance;\r\n        const tableHeaders = ['No.', 'Id Order', 'Nomor PO', 'Perusahaan', 'Tipe', 'Status','Aksi'];\r\n        const tableRows = ordersVerified.map((order) => [\r\n            order.idOrder,\r\n            order.noPO,\r\n            order.clientName,\r\n            this.checkTypeOrder(order.projectInstallation, order.managedService),\r\n            this.checkStatus(order),\r\n            <CustomizedButtons\r\n                variant=\"contained\"\r\n                size=\"small\"\r\n                color=\"#FD693E\"\r\n                onClick={() => this.handleEdit(order, listMaintenance)}>\r\n                    Ubah\r\n            </CustomizedButtons>\r\n        ]);\r\n        const tableMaintenanceHeaders = ['No.', 'Tanggal Maintenance', 'Status'];\r\n        let tableMaintenanceRows;\r\n\r\n\r\n        if(orderTarget !== null){\r\n            if(orderTarget.idOrderPi !== null){\r\n            }\r\n            if(orderTarget.idOrderMs !== null){\r\n                tableMaintenanceRows = orderTarget.idOrderMs.listMaintenance.map((maintenance, index) => [\r\n                    maintenance.dateMn,\r\n                    <Form.Control\r\n                        as=\"select\"\r\n                        size=\"lg\"\r\n                        key={index}\r\n                        name={\"statusMaintenance\" + index}\r\n                        value={ statusMaintenances[index] }\r\n                        onChange={this.handleChangeField}>\r\n                            <option value=\"Not Maintained\">Not Maintained</option>\r\n                            <option value=\"Maintained\">Maintained</option>\r\n                    </Form.Control>\r\n                ]);\r\n                listMaintenance = orderTarget.idOrderMs.listMaintenance.map((maintenance) => maintenance.idMaintenance);\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1>Daftar Order</h1>\r\n                <CustomizedTables headers={tableHeaders} rows={tableRows}/>\r\n                <Modal show={isEdit} handleCloseModal={this.handleCancel}>\r\n                    <div><h3 id='titleform' >Form Ubah Status Order</h3></div>\r\n                    {orderTarget !== null ?\r\n                        <><Form>\r\n                            <table>\r\n                                <tr>\r\n                                    <td>Id Order</td>\r\n                                    <td>: {orderTarget.idOrder}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Nomor PO</td>\r\n                                    <td>: {orderTarget.noPO}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Perusahaan</td>\r\n                                    <td>: {orderTarget.clientOrg}</td>\r\n                                </tr>\r\n                                { orderTarget.projectInstallation ?\r\n                                    <><tr>\r\n                                        <td style={{fontWeight: 'bold'}}>Project Installation</td>\r\n                                    </tr>\r\n                                        <tr>\r\n                                            <td>Status</td>\r\n                                            <td><Form.Control\r\n                                                as=\"select\"\r\n                                                size=\"lg\"\r\n                                                name=\"statusPi\"\r\n                                                value={ this.state.statusPi }\r\n                                                onChange={this.handleChangeField}>\r\n                                                    <option value=\"Inactive\">Inactive</option>\r\n                                                    <option value=\"In Progress\">In Progress</option>\r\n                                                    <option value=\"On Hold\">On Hold</option>\r\n                                                    <option value=\"Closed\">Closed</option>\r\n                                            </Form.Control></td>\r\n                                        </tr>\r\n                                    { this.state.isErrorPiClosed ?\r\n                                        <><tr>\r\n                                        <td style={{fontWeight: 'bold', color: \"#FD693E\"}}>Progress order belum 100%</td>\r\n                                    </tr></> : <></>}\r\n                                    </> : <></>}\r\n                                { orderTarget.managedService ?\r\n                                    <><tr>\r\n                                        <td style={{fontWeight: 'bold'}}>Managed Service</td>\r\n                                    </tr>\r\n                                        <tr>\r\n                                            <td>Maintenances</td>\r\n                                            <td>\r\n                                                <><CustomizedTables\r\n                                                    headers={tableMaintenanceHeaders}\r\n                                                    rows={tableMaintenanceRows}>\r\n                                                </CustomizedTables></>\r\n                                            </td>\r\n                                        </tr>\r\n                                        <tr>\r\n                                            <td>Status</td>\r\n                                            <td><Form.Control\r\n                                                as=\"select\"\r\n                                                size=\"lg\"\r\n                                                name=\"statusMs\"\r\n                                                value={ this.state.statusMs }\r\n                                                onChange={this.handleChangeField}>\r\n                                                <option value=\"Inactive\">Inactive</option>\r\n                                                <option value=\"Active\">Active</option>\r\n                                                <option value=\"Closed\">Closed</option>\r\n                                            </Form.Control></td>\r\n                                        </tr>\r\n                                        { this.state.isErrorMsClosed ?\r\n                                            <><tr>\r\n                                                <td style={{fontWeight: 'bold', color: \"#FD693E\"}}>Masih ada maintenance yang belum di-maintain</td>\r\n                                            </tr></> : <></>}\r\n                                    </>: <></>}\r\n                            </table>\r\n                            <div style={{alignItems:'right'}}>\r\n                                <CustomizedButtons variant=\"contained\" size=\"medium\" color=\"#FD693E\" onClick={this.handleSubmit}>\r\n                                    Simpan\r\n                                </CustomizedButtons>\r\n                            </div>\r\n                        </Form></>\r\n                        : <></> }\r\n                </Modal>\r\n                <Modal show={isSubmitted} handleCloseModal={this.handleCancel}>\r\n                    {orderTarget !== null ? <>\r\n                        <div>\r\n                            <h3 id='titleform' >\r\n                                Status Order dengan nomor {orderTarget.noPO} berhasil diubah menjadi\r\n                                {orderTarget.projectInstallation ? \" \" + this.state.statusPi : <></>}\r\n                                {orderTarget.managedService ? \" \" + this.state.statusMs : <></>}\r\n                            </h3>\r\n                        </div></> : <></>}\r\n                    <div style={{alignItems:'right'}}>\r\n                        <CustomizedButtons variant=\"contained\" size=\"medium\" color=\"#FD693E\" onClick={this.handleCancel}>\r\n                            Ok\r\n                        </CustomizedButtons>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default ChangeStatusOrder;",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":3,"column":21,"nodeType":"77","messageId":"78","endLine":3,"endColumn":22},{"ruleId":"75","severity":1,"message":"79","line":5,"column":17,"nodeType":"77","messageId":"78","endLine":5,"endColumn":26},{"ruleId":"75","severity":1,"message":"80","line":315,"column":15,"nodeType":"77","messageId":"78","endLine":315,"endColumn":27},{"ruleId":"81","severity":1,"message":"82","line":332,"column":59,"nodeType":"83","endLine":332,"endColumn":113},{"ruleId":"75","severity":1,"message":"84","line":3,"column":8,"nodeType":"77","messageId":"78","endLine":3,"endColumn":25},{"ruleId":"75","severity":1,"message":"85","line":6,"column":13,"nodeType":"77","messageId":"78","endLine":6,"endColumn":18},{"ruleId":"75","severity":1,"message":"86","line":6,"column":19,"nodeType":"77","messageId":"78","endLine":6,"endColumn":27},{"ruleId":"71","replacedBy":"87"},{"ruleId":"73","replacedBy":"88"},{"ruleId":"75","severity":1,"message":"89","line":266,"column":13,"nodeType":"77","messageId":"78","endLine":266,"endColumn":28},{"ruleId":"75","severity":1,"message":"90","line":267,"column":13,"nodeType":"77","messageId":"78","endLine":267,"endColumn":28},{"ruleId":"75","severity":1,"message":"91","line":271,"column":13,"nodeType":"77","messageId":"78","endLine":271,"endColumn":21},{"ruleId":"75","severity":1,"message":"92","line":272,"column":13,"nodeType":"77","messageId":"78","endLine":272,"endColumn":21},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'A' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'notification' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'CustomizedButtons' is defined but never used.","'click' is assigned a value but never used.","'setClick' is assigned a value but never used.",["93"],["94"],"'isErrorMsClosed' is assigned a value but never used.","'isErrorPiClosed' is assigned a value but never used.","'statusMs' is assigned a value but never used.","'statusPi' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]