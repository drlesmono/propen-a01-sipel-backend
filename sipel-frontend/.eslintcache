[{"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\index.js":"1","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\App.js":"3","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Layout\\index.js":"4","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\PenugasanEngineer\\index.js":"5","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\APIConfig.js":"6","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Button\\index.js":"7","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Table\\index.js":"8","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Modal\\index.js":"9","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Backdrop\\index.js":"10","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\PeriodeKontrak\\index.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":1054,"mtime":1619466352195,"results":"15","hashOfConfig":"13"},{"size":178,"mtime":1618680772693,"results":"16","hashOfConfig":"13"},{"size":19390,"mtime":1619466352230,"results":"17","hashOfConfig":"13"},{"size":143,"mtime":1618932282107,"results":"18","hashOfConfig":"13"},{"size":802,"mtime":1619176967606,"results":"19","hashOfConfig":"13"},{"size":2994,"mtime":1619024890744,"results":"20","hashOfConfig":"13"},{"size":478,"mtime":1618994528821,"results":"21","hashOfConfig":"13"},{"size":259,"mtime":1618994525865,"results":"22","hashOfConfig":"13"},{"size":25587,"mtime":1619523569598,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1qicre3",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\index.js",[],["50","51"],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\App.js",["52"],"// import logo from './logo.svg';\r\nimport './App.css';\r\n// import { render } from '@testing-library/react';\r\nimport React, { Component } from \"react\";\r\nimport Layout from \"./components/Layout\";\r\nimport PenugasanEngineer from \"./containers/PenugasanEngineer\";\r\nimport PeriodeKontrak from \"./containers/PeriodeKontrak\";\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        {/* <PenugasanEngineer/> */}\r\n        <PeriodeKontrak/>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Layout\\index.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\PenugasanEngineer\\index.js",["53","54"],"import React, { Component } from \"react\";\r\nimport APIConfig from \"../../APIConfig\";\r\nimport CustomizedTables from \"../../components/Table\";\r\nimport CustomizedButtons from \"../../components/Button\";\r\nimport Modal from \"../../components/Modal\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nclass PenugasanEngineer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ordersVerified: [ \r\n            // {items : [10,  '000010/I/PO-LA/2021', 'PIMS-190621/PT.Aplikasinusa', 'Project Installation (PI), Managed Service (MS)', 'Belum ditugaskan', 'Belum ditugaskan']},\r\n            // {items : [9,  '000010/I/PO-LA/2021', 'PIMS-190621/PT.Aplikasinusa', 'Project Installation (PI), Managed Service (MS)', 'Belum ditugaskan', 'Belum ditugaskan']}\r\n            ],\r\n            isLoading: false,\r\n            isEdit: false,\r\n            // isChange: false,\r\n            orderTarget: null,\r\n            users: [],\r\n            picEngineerPi: null,\r\n            picEngineerMs: null,\r\n            servicesEngineer: [],\r\n            isReport: false,\r\n            // isNotif: false,\r\n            // isError: false,\r\n            orderFiltered: [],\r\n            isFiltered: false\r\n            // listService: [],\r\n            // services: [],\r\n        };\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleReport = this.handleReport.bind(this);\r\n        this.handleFilter = this.handleFilter.bind(this);\r\n        // this.handleCloseNotif = this.handleCloseNotif.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n    \r\n    async loadData() {\r\n        try {\r\n            const orders = await APIConfig.get(\"/ordersVerified\");\r\n            const users = await APIConfig.get(\"/users\");\r\n            // const services = await APIConfig.get(\"/services\");\r\n            console.log(orders.data);\r\n            console.log(users.data);\r\n            this.setState({ ordersVerified: orders.data, users: users.data});\r\n            \r\n        } catch (error) {\r\n            alert(\"Oops terjadi masalah pada server\");\r\n            this.setState({ isError: true });\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        try {\r\n            if(this.state.orderTarget.projectInstallation === true){\r\n                // console.log(this.state.orderTarget.idOrderPi);\r\n                const pi = this.state.orderTarget.idOrderPi;\r\n                const dataPi = {\r\n                    idOrderPi: pi.idOrderPi,\r\n                    idUserEng: this.state.picEngineerPi,\r\n                    percentage: pi.percentage,\r\n                    startPI: pi.startPI,\r\n                    deadline: pi.deadline,\r\n                    dateClosedPI: pi.dateClosedPI\r\n                }\r\n                // console.log(dataPi);\r\n                await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/pi/${this.state.orderTarget.idOrderPi.idOrderPi}/updatePIC`, dataPi);\r\n                // const dataResponsePi = await responsePi.json();\r\n            }\r\n            if(this.state.orderTarget.managedService === true){\r\n                const ms = this.state.orderTarget.idOrderMs;\r\n                const dataMs = {\r\n                    idOrderMs: ms.idOrderMs,\r\n                    idUserPic: this.state.picEngineerMs,\r\n                    actualStart: ms.actualStart,\r\n                    actualEnd: ms.actualEnd,\r\n                    activated: ms.activated,\r\n                    timeRemaining: ms.timeRemaining,\r\n                    dateClosedMS: ms.dateClosedMS\r\n                }\r\n                // console.log(dataMs);\r\n                await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/updatePIC`, dataMs);\r\n                let listService = this.getListService(this.state.orderTarget);\r\n                console.log(this.state.servicesEngineer);\r\n                for(let i=0; i<this.state.servicesEngineer.length; i++){\r\n                    console.log(i);\r\n                    let service = listService[i];\r\n                    console.log(service);\r\n                    const dataService = {\r\n                        idService: service.idService,\r\n                        name: service.name,\r\n                        idUser: this.state.servicesEngineer[i]\r\n                    }\r\n                    console.log(this.state.orderTarget.idOrderMs.idOrderMs);\r\n                    // console.log(dataService);\r\n                    await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/ms/${this.state.orderTarget.idOrderMs.idOrderMs}/service/${service.idService}/updateEngineer`, dataService);\r\n                    // console.log(dataService);\r\n                }\r\n            }\r\n            this.loadData();\r\n        } catch (error) {\r\n            alert(\"Penugasan Engineer gagal disimpan\");\r\n            // this.setState({ isError: true });\r\n            console.log(error);\r\n        }\r\n        this.handleReport(event);\r\n        // this.handleCancel(event);\r\n        // this.setState({ \r\n        //     orderTarget: null,\r\n        //     users: [],\r\n        //     picEngineerPi: null,\r\n        //     picEngineerMs: null,\r\n        //     servicesEngineer: []\r\n        // });\r\n    }\r\n\r\n    handleReport(event){\r\n        event.preventDefault();\r\n        // this.setState({isEdit: false, isReport: true, isNotif: true});\r\n        this.setState({isEdit: false, isReport: true});\r\n        alert(\"Penugasan Engineer berhasil disimpan\");\r\n    }\r\n\r\n    checkTypeOrder(pi, ms){\r\n        if(pi === true && ms === true){\r\n            return \"Project Installation, Managed Service\";\r\n        }else if(pi === true){\r\n            return \"Project Installation\";\r\n        }else if(ms === true){\r\n            return \"Managed Service\";\r\n        }\r\n    }\r\n\r\n    getPICPI(idOrder){\r\n        let orderTarget = this.state.ordersVerified.filter(\r\n            order => order.idOrder === idOrder\r\n        );\r\n        let pi = orderTarget.map(order => {return order.idOrderPi});\r\n        // console.log(pi[0]);\r\n        // console.log(orderTarget !== null && pi[0] !== null);\r\n    \r\n        if(orderTarget !== null && pi[0] !== null){\r\n            let user = orderTarget.map(order => order.idOrderPi.idUserEng);\r\n            if(user !== null){\r\n                let pic = orderTarget.map(order => order.idOrderPi.idUserEng.fullname);\r\n                return pic;\r\n            }\r\n        }\r\n\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    getPICMS(idOrder){\r\n        let orderTarget = this.state.ordersVerified.filter(\r\n            order => order.idOrder === idOrder\r\n        );\r\n        let ms = orderTarget.map(order => {return order.idOrderMs});\r\n    \r\n        if(orderTarget !== null && ms[0] !== null){\r\n            let user = orderTarget.map(order => order.idOrderMs.idUserPic);\r\n            if(user !== null){\r\n                let pic = orderTarget.map(order => order.idOrderMs.idUserPic.fullname);\r\n                return pic;\r\n            }\r\n        }\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    getPICService(service){\r\n        if(service.idUser !== null) return service.idUser.fullname;\r\n        return \"Belum ditugaskan\";\r\n    }\r\n    \r\n    handleEdit(order) {\r\n        // const { value } = event.target;\r\n        // console.log(event.target);\r\n        // console.log(value);\r\n        // const order = this.getOrder(value);\r\n        this.setState({\r\n            isEdit: true,\r\n            orderTarget: order\r\n        });\r\n        if(order.idOrderPi !== null){\r\n            if(order.idOrderPi.idUserEng !== null){\r\n                this.setState({picEngineerPi: order.idOrderPi.idUserEng.id});\r\n            }\r\n        }\r\n        if(order.idOrderMs !== null){\r\n            if(order.idOrderMs.idUserPic !== null){\r\n                let servicesEngineer = order.idOrderMs.listService.map(service => service.idUser.id);\r\n                this.setState({\r\n                    picEngineerMs: order.idOrderMs.idUserPic.id, \r\n                    servicesEngineer: servicesEngineer\r\n                });\r\n            }\r\n        }\r\n        // console.log(this.state.orderTarget);\r\n        // console.log(this.state.picEngineerPi);\r\n    }\r\n\r\n    handleCancel(event) {\r\n        event.preventDefault();\r\n        this.setState({isEdit: false, isReport: false});\r\n    }\r\n\r\n    // handleCloseNotif(event){\r\n    //     event.preventDefault();\r\n    //     this.setState({isNotif: false, isError: false});\r\n    // }\r\n\r\n    handleChangeField(event) {\r\n        const { name, value } = event.target;\r\n        console.log(name, value);\r\n        const servicesEngineerNew = this.state.servicesEngineer;\r\n        if( name.substring(0,16) === \"servicesEngineer\"){\r\n            let index = Number(name.substring(16));\r\n            servicesEngineerNew[index] = value;\r\n            this.setState({ servicesEngineer: servicesEngineerNew});\r\n        }else{\r\n            this.setState({ [name]: value});\r\n        }\r\n    }\r\n\r\n    getListService(order){\r\n        if(order.idOrderMs !== null){\r\n            return order.idOrderMs.listService;\r\n        }\r\n    }\r\n\r\n    getOrder(idOrder){\r\n        const orders = this.state.ordersVerified;\r\n        for(let i=0; i<=orders.length; i++){\r\n            if(orders[i].idOrder === idOrder){\r\n                return orders[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFilter(event){\r\n        let newOrderList = this.state.ordersVerified;\r\n        const { value } = event.target;\r\n        if( value !== \"\" ){\r\n            console.log(this.checkTypeOrder(this.state.ordersVerified[0].projectInstallation, this.state.ordersVerified[0].managedService).toLowerCase());\r\n            console.log(this.getPICPI(this.state.ordersVerified[0].idOrder)[0]);\r\n            // newOrderList = this.state.ordersVerified.filter(order => {\r\n            //     return order.noPO !== null ? order.noPO.toLowerCase().includes(value.toLowerCase()) : \"\".toLowerCase().includes(value.toLowerCase()) || \r\n            //     order.orderName.toLowerCase().includes(value.toLowerCase()) ||\r\n            //     this.checkTypeOrder(order.projectInstallation, order.managedService).toLowerCase().includes(value.toLowerCase()) ||\r\n            //     order.idOrderPi !== null ? this.getPICPI(order.idOrder)[0].toLowerCase().includes(value.toLowerCase())\r\n            //     : \"\".toLowerCase().includes(value.toLowerCase()) ||\r\n            //     order.idOrderMs !== null ? this.getPICMS(order.idOrder)[0].toLowerCase().includes(value.toLowerCase()) : \"\".toLowerCase().includes(value.toLowerCase())\r\n            // });\r\n            newOrderList = this.state.ordersVerified.filter(order => {\r\n                return order.orderName.toLowerCase().includes(value.toLowerCase())\r\n            });\r\n            // console.log( this.state.ordersVerified[2].orderName.toLowerCase().includes(value.toLowerCase()))\r\n            this.setState({ isFiltered : true });\r\n        }else{\r\n            this.setState({ isFiltered : false });\r\n        }\r\n        this.setState({ orderFiltered : newOrderList });\r\n    }\r\n\r\n    render() {\r\n        const { ordersVerified, isEdit, orderTarget, users, picEngineerPi,\r\n             picEngineerMs, servicesEngineer, isReport, isNotif, isError, orderFiltered, isFiltered } = this.state;\r\n        console.log(orderTarget);\r\n        console.log(picEngineerPi);\r\n        console.log(servicesEngineer);\r\n        const tableHeaders = ['No.', 'Id Order', 'Nomor PO', 'Nama Order', 'Tipe', 'PIC PI', 'PIC MS', 'Aksi'];                  \r\n        const tableRows = isFiltered ? orderFiltered.map((order) =>\r\n                        [order.idOrder, order.noPO === null ? \"-\" : order.noPO, order.orderName, \r\n                        this.checkTypeOrder(order.projectInstallation, order.managedService), \r\n                        this.getPICPI(order.idOrder), this.getPICMS(order.idOrder),\r\n                        <CustomizedButtons variant=\"contained\" size=\"small\" color=\"#FD693E\"\r\n                        onClick={() => this.handleEdit(order)}>perbarui</CustomizedButtons>])\r\n                        : ordersVerified.map((order) =>\r\n                        [order.idOrder, order.noPO === null ? \"-\" : order.noPO, order.orderName, \r\n                        this.checkTypeOrder(order.projectInstallation, order.managedService), \r\n                        this.getPICPI(order.idOrder), this.getPICMS(order.idOrder),\r\n                        <CustomizedButtons variant=\"contained\" size=\"small\" color=\"#FD693E\"\r\n                        onClick={() => this.handleEdit(order)}>perbarui</CustomizedButtons>])\r\n        const tableServiceHeaders = ['No.', 'Nama Service', 'Engineer'];\r\n        let tableServiceRows;\r\n\r\n        if(orderTarget !== null){\r\n            if(orderTarget.idOrderPi !== null){\r\n            }\r\n            if(orderTarget.idOrderMs !== null){\r\n                tableServiceRows = orderTarget.idOrderMs.listService.map((service, index) =>\r\n                                        [service.name, isReport ? this.getPICService(service) :\r\n                                        <Form.Control as=\"select\" size=\"lg\" key={index} name={\"servicesEngineer\"+index} \r\n                                        value={servicesEngineer[index] === null ? users[0].id : servicesEngineer[index]}\r\n                                        onChange={this.handleChangeField}>\r\n                                            {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                        </Form.Control>]);\r\n            }\r\n        }\r\n\r\n        const title = isReport? \"Penugasan Engineer\" : \"Form Penugasan Engineer\";\r\n\r\n        const notification = isError ? \"Penugasan Engineer Gagal disimpan\" : \"Penugasan Engineer Berhasil disimpan\";\r\n\r\n        return (\r\n            <div style={{justifyContent: \"space-around\"}}>\r\n                <div>\r\n                    {/* <tr> */}\r\n                        <div><h1>Daftar Order</h1></div>\r\n                        <div><Form.Control type=\"text\" placeholder=\"Cari...\" onChange={this.handleFilter} id=\"search\"/></div>\r\n                    {/* </tr> */}\r\n                </div>\r\n                <div style={{width: 1300}}><CustomizedTables headers={tableHeaders} rows={tableRows}/></div>\r\n                {/* <Modal show={isNotif} style={{modal : {zIndex: 900}}}>\r\n                    {notification}\r\n                    <a href=\"#\" class=\"close\" onClick={()=>this.handleCloseNotif}>x</a>\r\n                    {console.log(isEdit, isReport, isNotif)}\r\n                </Modal> */}\r\n                <Modal show={isEdit || isReport} style={{modal : {zIndex: 200}}}>\r\n                    <div style={{ justifyContent: \"end\"}}><a href=\"#\" class=\"close\" onClick={this.handleCancel}>x</a></div>\r\n                    <h3 id='titleform' >{title}</h3>\r\n                    {console.log(isEdit, isReport, isNotif)}\r\n                    {orderTarget !== null ?\r\n                        <><Form>\r\n                            <table>\r\n                                <tr>\r\n                                    <td>Id Order</td>\r\n                                    <td>: {orderTarget.idOrder}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Nomor PO</td>\r\n                                    <td>: {orderTarget.noPO === null ? \"-\" : orderTarget.noPO}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Nama Order</td>\r\n                                    <td>: {orderTarget.orderName}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Perusahaan</td>\r\n                                    <td>: {orderTarget.clientOrg}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Tipe</td>\r\n                                    <td>{this.checkTypeOrder(orderTarget.projectInstallation, orderTarget.managedService)}</td>\r\n                                </tr>\r\n                                { orderTarget.projectInstallation ?\r\n                                    <><tr>\r\n                                        <td style={{fontWeight: 'bold'}}>Project Installation</td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                        <td>PIC Engineer</td>\r\n                                        {/* {console.log(picEngineerPi.id === null), console.log(users[0].id), console.log(picEngineerPi), console.log(users[0].id === picEngineerPi)} */}\r\n                                        {isReport ?\r\n                                        <td>: {this.getPICPI(orderTarget.idOrder)}</td> :\r\n                                        <td><Form.Control as=\"select\" size=\"lg\" name=\"picEngineerPi\" value={picEngineerPi === null ? users[0].id : picEngineerPi} onChange={this.handleChangeField}>\r\n                                                {users.map((user, index) => <option key={index} value={user.id}>{user.fullname}</option>)}\r\n                                            </Form.Control></td>}\r\n                                    </tr></>\r\n                                : <></>}\r\n                                { orderTarget.managedService ?\r\n                                <><tr>\r\n                                    <td style={{fontWeight: 'bold'}}>Managed Service</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Services</td>\r\n                                    <td>\r\n                                        <><CustomizedTables headers={tableServiceHeaders} rows={tableServiceRows}></CustomizedTables></>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>PIC Engineer</td>\r\n                                    {isReport ?\r\n                                        <td>: {this.getPICMS(orderTarget.idOrder)}</td> :\r\n                                    <td><Form.Control as=\"select\" size=\"lg\" name=\"picEngineerMs\" value={picEngineerMs === null ? users[0].id : picEngineerMs} onChange={this.handleChangeField}>\r\n                                            {/* {listServiceEngineerNew.map(user =><option value={user[1]}>{user[2]}</option>)} */}\r\n                                            {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                        </Form.Control></td>}\r\n                                </tr></>\r\n                                : <></>}\r\n                            </table>\r\n                            {isReport ? <></> :\r\n                            <div style={{alignItems:'right'}}><CustomizedButtons variant=\"contained\" size=\"medium\" color=\"#FD693E\" onClick={this.handleSubmit}>\r\n                                simpan\r\n                            </CustomizedButtons></div>}\r\n                        </Form></>\r\n                    : <></> }\r\n                </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PenugasanEngineer;","C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\APIConfig.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Button\\index.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Table\\index.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Modal\\index.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\components\\Backdrop\\index.js",[],"C:\\Users\\Hanna Jannatunna'iim\\Documents\\SI\\Semester 6\\Proyek Pengembangan Sistem Informasi\\04 Implementasi\\code\\propen-a01-sipel\\sipel-frontend\\src\\containers\\PeriodeKontrak\\index.js",["55","56","57","58"],"import React, { Component } from \"react\";\r\nimport APIConfig from \"../../APIConfig\";\r\nimport CustomizedTables from \"../../components/Table\";\r\nimport CustomizedButtons from \"../../components/Button\";\r\nimport Modal from \"../../components/Modal\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nclass PeriodeKontrak extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            ordersVerified: [],\r\n            isLoading: false,\r\n            isEdit: false,\r\n            isExtend: false,\r\n            orderTarget: null,\r\n            users: [],\r\n            picEngineerMs: null,\r\n            servicesEngineer: [],\r\n            servicesEngineerName: [],\r\n            isReport: false,\r\n            isReportExtend: false,\r\n            orderFiltered: [],\r\n            isFiltered: false,\r\n            currentDateTime: new Date(),\r\n            actualStart: null,\r\n            actualEnd: null,\r\n            totalServices: 0,\r\n            listService: [],\r\n            isAdded: false,\r\n            newNoPO: null,\r\n            timeRemaining: null,\r\n        };\r\n        this.handleEdit = this.handleEdit.bind(this);\r\n        this.handleCancel = this.handleCancel.bind(this);\r\n        this.handleChangeField = this.handleChangeField.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleReport = this.handleReport.bind(this);\r\n        this.handleFilter = this.handleFilter.bind(this);\r\n        this.handleAddServices = this.handleAddServices.bind(this);\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.loadData();\r\n    }\r\n    \r\n    async loadData() {\r\n        try {\r\n            const orders = await APIConfig.get(\"/orders/ms\");\r\n            const users = await APIConfig.get(\"/users\");\r\n            this.setState({ ordersVerified: orders.data, users: users.data});\r\n            // console.log(orders.data);\r\n        } catch (error) {\r\n            alert(\"Oops terjadi masalah pada server\");\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        if(this.state.formValid){\r\n            let newOrder;\r\n            try {   \r\n                let response;\r\n                if(this.state.isExtend){\r\n                    const order = this.state.orderTarget;\r\n                    const pi = order.idOrderPi === null ? null : order.idOrderPi.idOrderPi;\r\n                    const ms = order.idOrderMs.idOrderMs;\r\n                    const dataOrder = {\r\n                        idOrder: order.idOrder,\r\n                        orderName: order.orderName,\r\n                        clientName: order.clientName,\r\n                        clientOrg: order.clientOrg,\r\n                        clientDiv: order.clientDiv,\r\n                        clientPIC: order.clientPIC,\r\n                        clientEmail: order.clientEmail,\r\n                        clientPhone: order.clientPhone,\r\n                        dateOrder: order.dateOrder,\r\n                        noPO: this.state.newNoPO,\r\n                        noSPH: order.noSPH,\r\n                        description: order.description,\r\n                        verified: order.verified,\r\n                        projectInstallation: order.projectInstallation,\r\n                        managedService: order.managedService,\r\n                        idOrderPi: pi,\r\n                        idOrderMs: ms\r\n                    }\r\n                    // console.log(dataOrder);\r\n                    response = await APIConfig.put(`/order/${this.state.orderTarget.idOrder}/perpanjangKontrak`, dataOrder);\r\n                    newOrder = response.data.result;\r\n                    // console.log(newOrder);\r\n                }\r\n                const ms = this.state.isExtend ? newOrder.idOrderMs : this.state.orderTarget.idOrderMs;\r\n                // console.log(ms);\r\n                const dataMs = {\r\n                    idOrderMs: ms.idOrderMs,\r\n                    idUserPic: this.state.picEngineerMs,\r\n                    actualStart: this.convertDateToString(this.state.actualStart),\r\n                    actualEnd: this.convertDateToString(this.state.actualEnd),\r\n                    activated: ms.activated,\r\n                    dateClosedMS: ms.dateClosedMS\r\n                }\r\n                const newMs = await APIConfig.put(`/order/${this.state.isExtend? newOrder.idOrder : this.state.orderTarget.idOrder}/ms/${ms.idOrderMs}/updateKontrak`, dataMs);\r\n                // console.log(newMs);\r\n                if(this.state.isExtend){\r\n                    let listServiceName = this.state.servicesEngineerName;\r\n                    let listService = this.state.servicesEngineer;\r\n                    // console.log(listServiceName);\r\n                    // console.log(listService);\r\n                    // let service;\r\n                    // let listServiceNew = new Array(listService.length);\r\n                    for(let i=0; i<listService.length; i++){\r\n                        const dataService = {\r\n                            name: listServiceName[i],\r\n                            idUser: listService[i]\r\n                        }\r\n                        console.log(dataService);\r\n                        await APIConfig.post(`/order/${newOrder.idOrder}/ms/${ms.idOrderMs}/service`, dataService);\r\n                        this.loadData();\r\n                        // listServiceNew[i] = service.data.result;\r\n                    }\r\n                    // this.setState({ listServiceBeforeLoad : listServiceNew });\r\n                }\r\n                this.loadData();\r\n                this.setState({ orderTarget: newOrder });   \r\n            } catch (error) {\r\n                if(this.state.isExtend){\r\n                    alert(\"Perpanjangan Periode Kontrak gagal disimpan\");\r\n                }else{\r\n                    alert(\"Periode Kontrak gagal disimpan\");\r\n                }\r\n                console.log(error);\r\n            }\r\n            this.handleReport();\r\n        }else{\r\n            this.handleValidation(event);\r\n        } \r\n    }\r\n\r\n    handleReport(){\r\n        if(this.state.isExtend){\r\n            this.setState({isExtend: false, isReportExtend: true});\r\n            alert(\"Perpanjangan periode kontrak berhasil disimpan\");\r\n        }else{\r\n            this.setState({isEdit: false, isReport: true});\r\n            alert(\"Periode kontrak berhasil disimpan\");\r\n        }\r\n    }\r\n\r\n    getDate(value){\r\n        let date;\r\n        if(value.includes(\"T\")){\r\n            const valueSplit = value.split(\"T\");\r\n            date = valueSplit[0].split(\"-\");\r\n        }else{\r\n            date = value.split(\"-\");\r\n        }\r\n\r\n        const newDate = date[2]+\"/\"+date[1]+\"/\"+date[0];\r\n        return newDate;\r\n    }\r\n\r\n    getTimeRemaining(actualStart, actualEnd){\r\n        const startDate = new Date(actualStart);\r\n        const endDate = new Date(actualEnd);\r\n        let currentDate = this.state.currentDateTime;\r\n\r\n        if ( startDate > currentDate) {\r\n            console.log(startDate > currentDate);\r\n            return \"Belum mulai\";\r\n        } else if ( currentDate > endDate ){\r\n            console.log( currentDate > endDate );\r\n            return \"Habis\";\r\n        }\r\n        \r\n        let startYear = currentDate.getFullYear();\r\n        let startMonth = currentDate.getMonth();\r\n        let startDay = currentDate.getDate();\r\n        \r\n        let endYear = endDate.getFullYear();\r\n        let endMonth = endDate.getMonth();\r\n        let endDay = endDate.getDate();\r\n        \r\n        // We calculate February based on end year as it might be a leep year which might influence the number of days.\r\n        let february = (((endYear % 4 === 0) && (endYear % 100 !== 0)) || (endYear % 400 === 0)) ? 29 : 28;\r\n        // console.log(february);\r\n        let daysOfMonth = [31, february, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n        \r\n        let startDateNotPassedInEndYear = ((endMonth < startMonth) || (endMonth === startMonth )) && (endDay < startDay);\r\n        let years = endYear - startYear - (startDateNotPassedInEndYear ? 1 : 0);\r\n        \r\n        let months = (12 + endMonth - startMonth - (endDay < startDay ? 1 : 0)) % 12;\r\n        \r\n        // (12 + ...) % 12 makes sure index is always between 0 and 11\r\n        let days = startDay <= endDay ? endDay - startDay : daysOfMonth[(12 + endMonth - 1) % 12] - startDay + endDay;\r\n\r\n        let timeRemaining = \"\";\r\n        if(years === 0){\r\n            if(months === 0){\r\n                timeRemaining = days+\" hari\";\r\n            }else{\r\n                if(days === 0){\r\n                    timeRemaining = months+\" bulan\";\r\n                }\r\n                timeRemaining = months+\" bulan \"+days+\" hari\";\r\n            }\r\n        }else{\r\n            if(months === 0){\r\n                if(days === 0){\r\n                    timeRemaining = years+\" tahun\";\r\n                }\r\n                timeRemaining = years+\" tahun \"+days+\" hari\";\r\n            }else{\r\n                if(days === 0){\r\n                    timeRemaining = years+\" tahun \"+months+\" bulan\";\r\n                }\r\n                timeRemaining = years+\" tahun \"+months+\" bulan \"+days+\" hari\";\r\n            }\r\n        }\r\n\r\n        return timeRemaining;\r\n    }\r\n\r\n    handleChangeField(event) {\r\n        const { name, value } = event.target;\r\n        const servicesEngineerNew = this.state.servicesEngineer;\r\n        const servicesEngineerNameNew = this.state.servicesEngineerName;\r\n\r\n        if( name.substring(0,16) === \"servicesEngineer\"){\r\n            let index = Number(name.substring(16));\r\n            servicesEngineerNew[index] = value;\r\n            console.log(servicesEngineerNew);\r\n            this.setState({ servicesEngineer: servicesEngineerNew, formValid: true });\r\n        }else if( name.substring(0,11) === \"serviceName\" ){\r\n            let index = Number(name.substring(11));\r\n            servicesEngineerNameNew[index] = value;\r\n            console.log(servicesEngineerNameNew);\r\n            this.setState({ servicesEngineerName: servicesEngineerNameNew, formValid: true });\r\n        }else{\r\n            if(this.state.isExtend){\r\n                if( name === \"newNoP0\"){\r\n                    if( value === null){\r\n                        this.handleValidation(event);\r\n                    }else{\r\n                        this.setState({ formValid: true });\r\n                    } \r\n                }\r\n            }\r\n            this.setState({ [name]: value, formValid: true});\r\n        }\r\n    }\r\n\r\n    handleValidation(){\r\n        this.setState({ formValid: false });\r\n        alert(\"Nomor PO baru harus diisi\");\r\n    }\r\n\r\n    handleEdit(order, typeEdit) {\r\n        let actualStart = order.idOrderMs.actualStart.split(\"T\");\r\n        let actualEnd = order.idOrderMs.actualEnd.split(\"T\");\r\n        if(typeEdit === \"perbarui\"){\r\n            this.setState({ isEdit: true , formValid: true});\r\n        }else{\r\n            this.setState({ isExtend: true });\r\n        }\r\n\r\n        this.setState({  \r\n            orderTarget: order,\r\n            actualStart: actualStart[0],\r\n            actualEnd: actualEnd[0],\r\n            totalServices: order.idOrderMs.listService.length,\r\n            timeRemaining: this.getTimeRemaining(order.idOrderMs.actualStart, order.idOrderMs.actualEnd)  \r\n        });\r\n        \r\n        if(order.idOrderMs.idUserPic !== null){\r\n            let servicesEngineer = order.idOrderMs.listService.map(service => service.idUser.id);\r\n            let servicesEngineerName = order.idOrderMs.listService.map(service => service.name);\r\n            console.log(servicesEngineer);\r\n            this.setState({\r\n                picEngineerMs: order.idOrderMs.idUserPic.id, \r\n                servicesEngineer: servicesEngineer,\r\n                servicesEngineerName: servicesEngineerName\r\n            });\r\n        }\r\n    }\r\n\r\n    handleCancel(event) {\r\n        event.preventDefault();\r\n        this.setState({\r\n            isEdit: false, \r\n            isReport: false, \r\n            isExtend: false, \r\n            isReportExtend: false, \r\n            totalServices: 0,\r\n            isAdded: false,\r\n            timeRemaining: null,\r\n            serviceEngineer: [],\r\n            listService: [],\r\n            orderTarget: null,\r\n            picEngineerMs: null,\r\n            formValid: false\r\n        });\r\n        this.loadData();\r\n    }\r\n\r\n    getPICMS(idOrder){\r\n        let orderTarget = this.state.ordersVerified.filter(\r\n            order => order.idOrder === idOrder\r\n        );\r\n        let ms = orderTarget.map(order => {return order.idOrderMs});\r\n    \r\n        if(orderTarget !== null && ms[0] !== null){\r\n            let user = orderTarget.map(order => order.idOrderMs.idUserPic);\r\n            if(user !== null){\r\n                let pic = orderTarget.map(order => order.idOrderMs.idUserPic.fullname);\r\n                return pic;\r\n            }\r\n        }\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    getPICService(service){\r\n        if(service.idUser !== null) return service.idUser.fullname;\r\n        return \"Belum ditugaskan\";\r\n    }\r\n\r\n    convertDateToString(date){\r\n        return date+\"T17:00:00.000+00:00\";\r\n    }\r\n\r\n    changeDateFormat(date){\r\n        let dateSplit = date.split(\"/\");\r\n        return dateSplit[2]+\"-\"+dateSplit[1]+\"-\"+dateSplit[0];\r\n    }\r\n\r\n    getDaysMonthsYears(date){\r\n        const dateSplit = date.split(\" \");\r\n        if(date.includes(\"tahun\")){\r\n            if(date.includes(\"bulan\")){\r\n                if(date.includes(\"hari\")) return [dateSplit[0], dateSplit[2], dateSplit[4]];\r\n                return [0, dateSplit[2], dateSplit[4]];\r\n            }\r\n            if(date.includes(\"hari\")) return [dateSplit[0], 0, dateSplit[4]];\r\n            return [0, 0, dateSplit[4]];\r\n        }else{\r\n            if(date.includes(\"bulan\")){\r\n                if(date.includes(\"hari\")) return [dateSplit[0], dateSplit[2], 0];\r\n                return [0, dateSplit[2], 0];\r\n            }\r\n            return [dateSplit[0], 0, 0];\r\n        }\r\n    }\r\n\r\n    handleFilter(event){\r\n        let newOrderList = this.state.ordersVerified;\r\n        const { value } = event.target;\r\n        if( value !== \"\" ){\r\n            newOrderList = newOrderList.filter(order => {\r\n                return order.orderName.toLowerCase().includes(value.toLowerCase())\r\n            });\r\n            this.setState({ isFiltered : true });\r\n        }else{\r\n            this.setState({ isFiltered : false });\r\n        }\r\n        this.setState({ orderFiltered : newOrderList });\r\n    }\r\n\r\n    handleAddServices(listService){\r\n        this.setState({isAdded: true});\r\n        let listServiceNew = [[...listService]];\r\n        let servicesEngineer = [...this.state.servicesEngineer];\r\n        let initialTotal = listService.length;\r\n        const totalServicesNew = initialTotal+1;\r\n        this.setState({ totalServices: totalServicesNew });\r\n        servicesEngineer = servicesEngineer.concat(null);\r\n        this.setState({serviceEngineer: servicesEngineer});\r\n        listServiceNew = listService.concat([[<Form.Control type=\"text\" name={\"serviceName\"+initialTotal} \r\n                            placeholder=\"masukkan nama service\" onChange={this.handleChangeField}/>, \r\n                            <Form.Control as=\"select\" size=\"lg\" key={initialTotal} name={\"servicesEngineer\"+initialTotal} \r\n                            value={this.state.servicesEngineer[initialTotal] === null ? this.state.users[0].id : this.state.servicesEngineer[initialTotal]}\r\n                            onChange={this.handleChangeField}>{this.state.users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                            </Form.Control>]]);\r\n\r\n        this.setState({listService: listServiceNew});\r\n    }\r\n\r\n    render() {\r\n        const { ordersVerified, isEdit, isExtend, orderTarget, users, actualStart, actualEnd, picEngineerMs, isAdded, timeRemaining, listServiceBeforeLoad,\r\n            servicesEngineer, servicesEngineerName, isReport, isReportExtend, orderFiltered, isFiltered, listService } = this.state;\r\n        const tableHeaders = ['No.', 'Id Order', 'Nomor PO', 'Nama Order', 'Periode Mulai', 'Periode Berakhir', 'Waktu Tersisa', 'Aksi'];                  \r\n        console.log(ordersVerified);\r\n        console.log(orderTarget);\r\n  \r\n        const tableRows = isFiltered ? orderFiltered.map((order) =>\r\n                        [order.idOrder, order.noPO === null ? \"-\" : order.noPO, order.orderName, \r\n                        this.getDate(order.idOrderMs.actualStart), this.getDate(order.idOrderMs.actualEnd),\r\n                        this.getTimeRemaining(order.idOrderMs.actualStart, order.idOrderMs.actualEnd),\r\n                        <><CustomizedButtons variant=\"contained\" size=\"small\" color=\"#FD693E\" onClick={() => this.handleEdit(order, \"perbarui\")}>perbarui</CustomizedButtons>\r\n                        <CustomizedButtons variant=\"contained\" size=\"small\" color=\"#FD693E\"onClick={() => this.handleEdit(order, \"perpanjang\")}>perpanjang</CustomizedButtons></>])\r\n                        : ordersVerified.map((order) =>\r\n                        [order.idOrder, order.noPO === null ? \"-\" : order.noPO, order.orderName, \r\n                        this.getDate(order.idOrderMs.actualStart), this.getDate(order.idOrderMs.actualEnd),\r\n                        this.getTimeRemaining(order.idOrderMs.actualStart, order.idOrderMs.actualEnd),\r\n                        <><CustomizedButtons variant=\"contained\" size=\"small\" color=\"#FD693E\" onClick={() => this.handleEdit(order, \"perbarui\")}>perbarui</CustomizedButtons>\r\n                        <CustomizedButtons variant=\"contained\" size=\"small\" color=\"#FD693E\"onClick={() => this.handleEdit(order, \"perpanjang\")}>perpanjang</CustomizedButtons></>])\r\n \r\n        const tableServiceHeaders = ['No.', 'Nama Service', 'Engineer'];\r\n        let tableServiceRows;\r\n\r\n        if(orderTarget !== null){\r\n            // if(orderTarget.idOrderMs.listService !== null){\r\n                tableServiceRows = isAdded ? listService : orderTarget.idOrderMs.listService.map((service, index) =>\r\n                                    [isExtend? <Form.Control type=\"text\" name={\"serviceName\"+index} value={servicesEngineerName[index] === null ? \r\n                                    service.name : servicesEngineerName[index]} onChange={this.handleChangeField} placeholder={service.name}/>\r\n                                    : service.name, (isReport || isEdit) ? this.getPICService(service) :\r\n                                    <Form.Control as=\"select\" size=\"lg\" key={index} name={\"servicesEngineer\"+index} \r\n                                    value={servicesEngineer[index] === null ? users[0].id : servicesEngineer[index]}\r\n                                    onChange={this.handleChangeField}>\r\n                                    {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                </Form.Control>]);\r\n            // }else{\r\n            //     tableServiceRows = isAdded ? listService : listServiceBeforeLoad.map((service, index) =>\r\n            //                         [isExtend? <Form.Control type=\"text\" name={\"serviceName\"+index} value={servicesEngineerName[index] === null ? \r\n            //                         service.name : servicesEngineerName[index]} onChange={this.handleChangeField} placeholder={service.name}/>\r\n            //                         : service.name, (isReport || isEdit) ? this.getPICService(service) :\r\n            //                         <Form.Control as=\"select\" size=\"lg\" key={index} name={\"servicesEngineer\"+index} \r\n            //                         value={servicesEngineer[index] === null ? users[0].id : servicesEngineer[index]}\r\n            //                         onChange={this.handleChangeField}>\r\n            //                         {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n            //                     </Form.Control>]);\r\n            // }\r\n            // console.log(tableServiceRows);\r\n        }\r\n\r\n        const titleExtend = isReportExtend? \"Perpanjangan Periode Kontrak\" : \"Form Perpanjangan Periode Kontrak\";\r\n        const title = isReport? \"Rincian Periode Kontrak\" : \"Form Perbarui Periode Kontrak\";\r\n\r\n        return (\r\n            <div style={{justifyContent: \"space-around\"}}>\r\n                <div>\r\n                    <div><h1>Daftar Order</h1></div>\r\n                    <div><Form.Control type=\"text\" placeholder=\"Cari...\" onChange={this.handleFilter} id=\"search\"/></div>\r\n                </div>\r\n                <div style={{width: 1300}}><CustomizedTables headers={tableHeaders} rows={tableRows}/></div>\r\n                {/* <Modal show={isNotif} style={{modal : {zIndex: 900}}}>\r\n                    {notification}\r\n                    <a href=\"#\" class=\"close\" onClick={()=>this.handleCloseNotif}>x</a>\r\n                    {console.log(isEdit, isReport, isNotif)}\r\n                </Modal> */}\r\n                <Modal show={isEdit || isReport || isExtend || isReportExtend} style={{modal : {zIndex: 200}}}>\r\n                    <div style={{ justifyContent: \"end\"}}><a href=\"#\" class=\"close\" onClick={this.handleCancel}>x</a></div>\r\n                    <h3 id='titleform' >{isEdit? title : titleExtend}</h3>\r\n                    {orderTarget !== null ?\r\n                        <Form>\r\n                            <table>\r\n                                <tr>\r\n                                    <td>Id Order</td>\r\n                                    <td>: {orderTarget.idOrder}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Nomor PO</td>\r\n                                    <td>: {orderTarget.noPO === null ? \"-\" : orderTarget.noPO}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Nama Order</td>\r\n                                    <td>: {orderTarget.orderName}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Perusahaan</td>\r\n                                    <td>: {orderTarget.clientOrg}</td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td style={{fontWeight: 'bold'}}>Managed Service</td>\r\n                                    {isExtend ? <td><CustomizedButtons variant=\"contained\" size=\"medium\" color=\"#FD693E\" onClick={() => this.handleAddServices(tableServiceRows)}>\r\n                                        + Tambah Services\r\n                                        </CustomizedButtons></td>\r\n                                        : <></>}\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Services</td>\r\n                                    <td>\r\n                                        <><CustomizedTables headers={tableServiceHeaders} rows={tableServiceRows}></CustomizedTables></>\r\n                                    </td>\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>PIC Engineer</td>\r\n                                    {isExtend ?\r\n                                    <td><Form.Control as=\"select\" size=\"lg\" name=\"picEngineerMs\" value={picEngineerMs === null ? users[0].id : picEngineerMs} onChange={this.handleChangeField}>\r\n                                            {users.map(user =><option value={user.id}>{user.fullname}</option>)}\r\n                                        </Form.Control></td>\r\n                                    : <td>: {this.getPICMS(orderTarget.idOrder)}</td>}\r\n                                </tr>\r\n                                <tr>\r\n                                    { isExtend ? <>\r\n                                    <td>Nomor PO Baru</td>\r\n                                    <Form.Control type=\"text\" name=\"newNoPO\" onChange={this.handleChangeField} placeholder=\"masukkan nomor PO baru\"/></> : <></> } \r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Periode Mulai</td>\r\n                                    {isReport ? \r\n                                    <td>: {actualStart}</td> :\r\n                                    <td><Form.Control type=\"date\" name=\"actualStart\" value={actualStart} onChange={this.handleChangeField}/></td> }\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Periode Berakhir</td>\r\n                                    {isReport ? \r\n                                    <td>: {actualEnd}</td> :\r\n                                    <td><Form.Control type=\"text\" type=\"date\" name=\"actualEnd\" value={actualEnd} onChange={this.handleChangeField}/></td> }\r\n                                </tr>\r\n                                <tr>\r\n                                    <td>Waktu Tersisa</td> \r\n                                    <td>: {timeRemaining}</td> \r\n                                </tr>\r\n                            </table>\r\n                            {isReport || isReportExtend ? <></> :\r\n                            <div style={{alignItems:'right'}}><CustomizedButtons variant=\"contained\" size=\"medium\" color=\"#FD693E\" onClick={this.handleSubmit}>\r\n                                simpan\r\n                            </CustomizedButtons></div> }\r\n                        </Form>\r\n                    : <></> }\r\n                </Modal>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PeriodeKontrak;",{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":6,"column":8,"nodeType":"65","messageId":"66","endLine":6,"endColumn":25},{"ruleId":"63","severity":1,"message":"67","line":311,"column":15,"nodeType":"65","messageId":"66","endLine":311,"endColumn":27},{"ruleId":"68","severity":1,"message":"69","line":328,"column":59,"nodeType":"70","endLine":328,"endColumn":113},{"ruleId":"63","severity":1,"message":"71","line":103,"column":23,"nodeType":"65","messageId":"66","endLine":103,"endColumn":28},{"ruleId":"63","severity":1,"message":"72","line":388,"column":134,"nodeType":"65","messageId":"66","endLine":388,"endColumn":155},{"ruleId":"68","severity":1,"message":"69","line":451,"column":59,"nodeType":"70","endLine":451,"endColumn":113},{"ruleId":"73","severity":1,"message":"74","line":508,"column":67,"nodeType":"75","messageId":"76","endLine":508,"endColumn":78},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"no-unused-vars","'PenugasanEngineer' is defined but never used.","Identifier","unusedVar","'notification' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'newMs' is assigned a value but never used.","'listServiceBeforeLoad' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-global-assign","no-unsafe-negation"]